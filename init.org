#+TITLE: Emacs configuration file
#+AUTHOR: Matthias Schmitt
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args :comments both

This is my emacs configuration file in literate style as an org mode file.

* Preface

We automatically reload the configuration after changes to the 'init.org' file.

** Tangle

#+BEGIN_SRC emacs-lisp
  (setq user-emacs-directory "~/.emacs.d/")
#+END_SRC

TODO why are there use-package errors when using byte-compile-file

#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name "init.org" user-emacs-directory))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
	(org-babel-tangle)
	;; (byte-compile-file (expand-file-name "init.el" user-emacs-directory))
	)))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

* Initial Stuff

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC

** Init Time

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** Garbage Collection

Disabling GC (by setting `gc-cons-threshold' to a very large value)
during startup is said to improve startup time by reducing the number of GC runs.
After startup reset it to reasonable value

#+BEGIN_SRC emacs-lisp
  ;; (message (format "%s - %s" gc-cons-threshold gc-cons-percentage))
  (setq garbage-collection-messages t)

  (setq gc-cons-threshold 402653184) ;;gc-cons-percentage 0.6)
  (add-hook 'after-init-hook (lambda ()
			       (run-with-idle-timer
				  10
				  nil
				  (lambda ()
				    (interactive)
				    (message "Reset gc threshold after init and idle")
				    (setq gc-cons-threshold 20000000)))))
  (add-hook 'focus-out-hook 'garbage-collect)
#+END_SRC

** straight.el

Bootstrap straight.el

#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Use ~straight.el~ together with ~use-package~

Package `use-package' provides a handy macro by the same name which
is essentially a wrapper around `with-eval-after-load' with a lot
of handy syntactic sugar and useful features.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (straight-use-package 'use-package))

  ;; Tell `use-package' to always load features lazily unless told
  ;; otherwise. It's nicer to have this kind of thing be deterministic:
  ;; if `:demand' is present, the loading is eager; otherwise, the
  ;; loading is lazy. See
  ;; https://github.com/jwiegley/use-package#notes-about-lazy-loading.
  (setq use-package-always-defer t)

  ;; When configuring a feature with `use-package', also tell
  ;; straight.el to install a package of the same name, unless otherwise
  ;; specified using the `:straight' keyword.
  (setq straight-use-package-by-default t)

  (setq use-package-compute-statistics t)
  (setq use-package-verbose t)
#+END_SRC

Don't clobber the init.el file
use a own file for emacs custom definition

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

** Basic packages

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand
    :config
    (general-evil-setup t)

    (defconst my-menu-key "SPC")
    (defconst my-non-normal-menu-key "M-SPC")
    (general-create-definer my-menu-def
      :states '(normal insert emacs)
      :keymaps 'override
      :prefix my-menu-key
      :non-normal-prefix my-non-normal-menu-key)
    (my-menu-def
      "?" '(general-describe-keybindings :which-key "show bindings"))

    (defconst my-leader-key ",")
    (defconst my-non-normal-leader-key "M-,")
    (general-create-definer my-leader-def
      :states '(normal)
      :keymaps 'override
      :prefix my-leader-key
      :non-normal-prefix my-non-normal-leader-key)
    )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package epkg
    :defer t
    ;; on func epkg-list-packages)
    )
#+END_SRC

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand
    :config (exec-path-from-shell-initialize))
#+end_src

* Saving
** Backup

#+BEGIN_SRC emacs-lisp
  (defvar --backup-directory (expand-file-name ".cache/backups" user-emacs-directory))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t               ; backup of a file the first time it is saved.
	backup-by-copying t               ; don't clobber symlinks
	version-control t                 ; version numbers for backup files
	delete-old-versions t             ; delete excess backup files silently
	;; delete-by-moving-to-trash t
	kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
	kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
	auto-save-default t               ; auto-save every buffer that visits a file
	auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
	auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
	)
#+END_SRC

** Undo history

#+BEGIN_SRC emacs-lisp
  (defvar --undo-directory (expand-file-name ".cache/undo" user-emacs-directory))
  (if (not (file-exists-p --undo-directory))
      (make-directory --undo-directory t))
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist `(("." . ,--undo-directory)))
#+END_SRC

* Navigation
** abo-abo

[[http://oremacs.com/swiper/][ivy & swiper manual]]

#+BEGIN_SRC emacs-lisp
  (my-menu-def
    "TAB" '(mode-line-other-buffer :which-key "last-buffer")
    "M-TAB" '((lambda () (interactive (switch-to-buffer-other-window (other-buffer))))
	      :which-key "last-buffer-other-window")

    "B" '(:ignore t :which-key "Buffer")
    "B m" '((lambda () (interactive (switch-to-buffer "*Messages*")))
	    :which-key "messages")
    "B M" '((lambda () (interactive (switch-to-buffer-other-window "*Messages*")))
	    :which-key "messages-in-other")
    "B s" '((lambda () (interactive (switch-to-buffer "*scratch*")))
	    :which-key "scratch")
    "B S" '((lambda () (interactive (switch-to-buffer-other-window "*scratch*")))
	    :which-key "scratch-in-other")
    "B w" '((lambda () (interactive (switch-to-buffer "*Warnings*")))
	    :which-key "warnings")
    "B W" '((lambda () (interactive (switch-to-buffer-other-window "*Warnings*")))
	    :which-key "warnings-in-other")
    "B d" 'evil-delete-buffer
    "B q" 'quit-window

    "w" 'other-window
    "W" '(:ignore t :which-key "Window")
    "W d" 'delete-window
    "W o" 'delete-other-windows)

  (use-package ivy
    :demand
    :diminish ivy-mode
    :general
    (my-menu-def
      "b" '(:ignore t :which-key "Buffer")
      "b" (general-key-dispatch 'ivy-switch-buffer
	    :timeout .33
	    "m" (lambda () (interactive (switch-to-buffer "*Messages*")))
	    "s" (lambda () (interactive (switch-to-buffer "*scratch*")))
	    "w" (lambda () (interactive (switch-to-buffer "*Warnings*")))
	    "b" 'ivy-switch-buffer
	    "d" 'evil-delete-buffer
	    "q" 'quit-window
	    ))

    (:keymaps 'ivy-minibuffer-map
	      "C-l" 'ivy-alt-done
	      "C-h" 'ivy-backward-delete-char
	      "<escape>" 'minibuffer-keyboard-quit
	      "C-SPC" 'nil
	      )

    (:keymaps 'ivy-occur-grep-mode-map
	      "SPC" nil)

    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-extra-directories nil)
    (setq ivy-wrap t))

  (use-package ivy-hydra
    :defer 15
    :after (ivy hydra)
    :commands (hydra-ivy/body))

  (use-package prescient
    :demand
    :after ivy
    :config (setq prescient-filter-method 'literal+initialism))

  (use-package ivy-prescient
    :demand
    :after (prescient ivy)
    :config (ivy-prescient-mode t))

  (use-package ivy-rich
    :demand
    :after (ivy counsel)
    :config (ivy-rich-mode 1))

  (use-package counsel
    :demand
    :diminish counsel-mode
    :general (my-menu-def
	       "f" '(:ignore t :which-key "File")
	       "f" 'counsel-find-file
	       "F" '(:ignore t :which-key "File")
	       "F r" '(counsel-recentf :which-key "recent")
	       "r" '(counsel-recentf :which-key "recent")
	       "SPC" '(counsel-M-x :which-key "M-x"))

    :config (counsel-mode))

  (use-package counsel-tramp
    :defer 15
    :after counsel
    :general (my-menu-def
	       "F t" 'counsel-tramp)
    :config (setq tramp-default-method "ssh"))

  (use-package swiper
    :defer 15
    :general (:states 'normal
		      "C-s" 'swiper
		      ))

  (use-package avy
    :defer 15
    :commands (avy-goto-char-2 avy-goto-char-timer avy-goto-line)
    :general (:states 'normal
		      "g t" 'avy-goto-char-2
		      ))

  (use-package hydra
    :defer 15)
#+END_SRC

** Symbol

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :defer 15
    :general (my-menu-def
	       "s" '(:ignore t :which-key "Symbol")
	       "s" (general-key-dispatch 'symbol-overlay-put
		     :timeout .33
		     "n" 'symbol-overlay-jump-next
		     "p" 'symbol-overlay-jump-previous
		     "d" 'symbol-overlay-remove-all
		     "r" 'symbol-overlay-rename
		     )

	       "S" '(:ignore t :which-key "Symbol")
	       "S s" 'symbol-overlay-mode
	       "S n" 'symbol-overlay-jump-next
	       "S p" 'symbol-overlay-jump-prev
	       "S d" 'symbol-overlay-remove-all
	       "S r" 'symbol-overlay-rename
	       ))
#+end_src

* Evil

https://github.com/emacs-evil/evil-collection

https://github.com/noctuid/evil-guide

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :demand
    :diminish undo-tree-mode
    :general (:states 'normal
		      "U" 'undo-tree-visualize)
    :config
    (global-undo-tree-mode +1))

  (use-package evil
    :demand
    :init
    (setq evil-want-C-w-delete nil)
    (setq evil-want-C-w-in-emacs-state t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (cl-loop for (mode . state) in '((haskell-interactive-mode . emacs)
				     (haskell-error-mode . emacs)
				     (term-mode . emacs)
				     (messages-mode . normal)
				     (compilation-mode . motion)
				     )
	     do (evil-set-initial-state mode state))
    ;; (cl-loop for map in '(helpful-mode-map
    ;; 			  )
    ;; 	     do (evil-make-overriding-map map))
    (evil-set-command-property 'evil-yank :move-point t)
    (setq evil-echo-state nil)
    (setq evil-ex-substitute-global t)
    )
#+END_SRC

** Fixing modes

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'dired-mode-map
   "SPC" nil)

  (general-define-key
   :keymaps 'Info-mode-map
   "SPC" nil)
#+END_SRC

** Vim goodies

Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode 'hs-minor-mode)
#+END_SRC

Equivalent of ~nnoremap n nzz~
    
#+BEGIN_SRC emacs-lisp
  (defun my-center-line (&rest _)
    (evil-scroll-line-to-center nil))

  (advice-add 'evil-search-next :after #'my-center-line)
#+END_SRC

** Evil packages

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :demand
    :diminish (evil-commentary-mode)
    :config (evil-commentary-mode))

  (use-package evil-surround
    :demand
    :config (global-evil-surround-mode 1))

  (use-package evil-matchit
    :demand
    :config (global-evil-matchit-mode 1))

  (use-package smartparens
    :demand)

  (use-package evil-smartparens
    :demand
    :after (evil smartparens)
    :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))

  (use-package evil-mc
    :demand
    :diminish emc
    ;; :config
    ;; (global-evil-mc-mode 1)
    ;; (add-hook 'magit-mode-hook #'evil-mc-mode -1))
    )

  (use-package evil-visualstar
    :demand
    :config (global-evil-visualstar-mode))
#+END_SRC

* Project management

TODO [[https://github.com/technomancy/find-file-in-project][find-file-in-project]] vs projectile

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :demand
    :diminish (projectile-mode)
    :general (my-menu-def
		      "p" 'projectile-find-file
		      "P" 'projectile-switch-project)
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-generic-command "fd -H --ignore-file .projectile -t f -0")
    ;; (setq projectile-indexing-method 'turbo-alien)
    (setq projectile-project-search-path '("~/proj/")))

  (use-package counsel-projectile
    :demand
    :after (counsel projectile)
    :general (my-menu-def
		      "p" 'counsel-projectile
		      "P" 'counsel-projectile-switch-project
		      "/" '(counsel-projectile-rg :which-key "search proj"))
    :config (counsel-projectile-mode))
#+END_SRC

* Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer 60
    :config
    (add-hook 'org-mode-hook 'flyspell-mode)
    (setq org-directory "~/org/")
    (setq org-default-notes-file (expand-file-name "tage.org" org-directory))
    (org-babel-do-load-languages 'org-babel-load-languages
				 '((shell . t))))

  (use-package evil-org
    :demand
    :after (evil org)
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer 15
    :config
    (setq org-caldav-url "https://posteo.de:8443/calendars/male.schmitt"
	  org-caldav-calendar-id "default"
	  org-caldav-inbox "~/org/cal.org"
	  org-icalendar-timezone "Europe/Berlin"))
#+END_SRC

* Git
** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer 30
    :general (my-menu-def
	       "g" '(nil :which-key "git/vc")
	       "g s" 'magit-status)
    (:keymaps 'magit-mode-map
	      "SPC" nil ))

  (use-package evil-magit
    :demand
    :after (evil magit))
#+END_SRC

** Forge

#+BEGIN_SRC emacs-lisp
  (use-package ghub
    :demand)

  (use-package forge
    :demand
    :after (magit ghub))
#+END_SRC

** Additional

#+BEGIN_SRC emacs-lisp
  ;; (use-package git-gutter-fringe+
  ;;   :ensure t
  ;;   :init (global-git-gutter-fringe+-mode)
  ;;   )
#+END_SRC

* TODO Mail

todo

* Visual

Turn off mouse interface early in startup to avoid momentary display.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
	       '(font . "Hack-12"))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat t)
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :demand
    :config (minions-mode 1))

  (use-package moody
    :demand
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

** Other

Highlight delimiters such as parentheses, brackets or braces according to their depth

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer 15
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

Display '~' on empty lines like in vi

#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :defer 15
    :hook (prog-mode . vi-tilde-fringe-mode))
#+END_SRC

* Completion

https://company-mode.github.io/

https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-in-Buffers.html

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 15
    :diminish yas-minor-mode
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package auto-yasnippet
    :after yasnippet
    :config (setq aya-case-fold t))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer 30)

  (use-package company-prescient
    :after (company))

  (use-package pos-tip
    :defer 30)

  (use-package company-quickhelp
    :after (company pos-tip)
    :config (company-quickhelp-mode))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 30
    :general (my-menu-def
	       "e" '(:ignore t :which-key "Errors")
	       "e e" 'flycheck-buffer
	       "e b" 'flycheck-buffer
	       "e c" 'flycheck-compile
	       "e n" 'flycheck-next-error
	       "e p" 'flycheck-prev-error))

#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook (prog-mode . lsp)
  :commands lsp)

(use-package lsp-ui
  :after (lsp-mode)
  :commands lsp-ui-mode)

(use-package company-lsp
  :after (company lsp-mode)
  :commands company-lsp
  :config (push 'company-lsp company-backends))
#+END_SRC

** Spelling

#+BEGIN_SRC emacs-lisp
  (cond
   ((executable-find "aspell")
    ;; you may also need `ispell-extra-args'
    (setq ispell-program-name "aspell")
    ;; (setq-default ispell-local-dictionary "en_US" "de_DE")
    (setq-default ispell-local-dictionary "en_US")
    (setq ispell-list-command "--list"))
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")

    ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
    ;; it's also used as the key to lookup ispell-local-dictionary-alist
    ;; if we use different dictionary
    (setq-default ispell-local-dictionary "en_US")
    (setq ispell-local-dictionary-alist
	  '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
   (t (setq ispell-program-name nil)))


  (use-package flyspell
    :config
    ;; ommit error messages on spell checking for performance sake
    (setq flyspell-issue-message-flag nil))

#+End_SRC

* TODO Semantic

#+BEGIN_SRC emacs-lisp
  (use-package srefactor
    :defer
    ;;:general
  )
#+END_SRC

* Programming languages
** C++
https://github.com/realgud/realgud
https://github.com/tuhdo/semantic-refactor

#+BEGIN_SRC emacs-lisp

  ;; (use-package cc-mode
  ;;   :hook)

  (use-package realgud
    :defer)

#+END_SRC

** Haskell
https://commercialhaskell.github.io/intero/

#+BEGIN_SRC emacs-lisp

  (use-package haskell-mode
    :defer t
    :bind (:map haskell-mode-map
		("C-c C-c" . haskell-compile))
    )

  (use-package intero
    :hook (haskell-mode . intero-mode)
    )


  ;; (use-package haskell-process
  ;;   :after haskell-mode)

  ;; (use-package haskell-interactive-mode
  ;;   :after haskell-mode
  ;;   :contig (add-hook 'haskell-mode-hook 'interactive-haskell-mode))


#+END_SRC

** Latex

#+BEGIN_SRC emacs-lisp

;;(use-package auctex
  ;;:defer t
  ;;:hook (latex-mode)
  ;;:config (progn
	    ;;(setq TeX-parse-self t) ;; enable parse on load
	    ;;(setq TeX-auto-safe t) ;; enable parse on safe
	    ;;(setq TeX-safe-query nil)
	    ;;(setq-default TeX-master nil)
	    ;;(setq TeX-PDF-mode t)
	    ;;(add-hook 'TeX-mode-hook 'flyspell-mode)
	    ;;(if (executable-find "latexmk")
		;;)))
;;
;;(use-package auctex-latexmk
  ;;:after (auctex)
  ;;:config (progn
	    ;;(auctex-latexmk-setup)
	    ;;(setq auctex-latexmk-inherit-TeX-PDF-mode t)))

;; (use-package latex-preview-pane
;;   :defer t)

#+END_SRC

** Rust

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :config (push "target" projectile-globally-ignored-directories))
#+END_SRC

** Elm

#+begin_src emacs-lisp
  (use-package elm-mode
    :mode ("\\.elm\\'")
    :config
    (add-to-list 'company-backends 'company-elm)
    (push "elm-stuff" projectile-globally-ignored-directories))
#+end_src

** Markups

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'"))

  (use-package toml-mode
    :mode ("\\.toml\\'"))
#+end_src

* Misc
https://github.com/purcell/exec-path-from-shell
** Packages
*** Helpful

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :defer 5
    :general (my-menu-def
		      "h" '(helpful-at-point :which-key "help")
		      "H" '(:ignore t :which-key "Help")
		      "H v" 'helpful-variable
		      "H f" 'helpful-function
		      "H k" 'helpful-key
		      "H s" 'helpful-symbol
		      )
    :config
    (general-define-key
     :keymaps 'helpful-mode-map
     "SPC" nil
     "q" 'quit-window)
    (evil-make-overriding-map helpful-mode-map 'normal))

#+END_SRC

*** Indent

#+BEGIN_SRC emacs-lisp
  (use-package clean-aindent-mode
    :config (setq clean-aindent-is-simple-indent t))
#+END_SRC

** Settings

Always follow symlinks to vc controlled sources.
This happens a lot because my dotfiles are linked by stow.
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

Recognize arch linux pgkbuild files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+END_SRC

** Functions

#+BEGIN_SRC emacs-lisp
  (defun rename-current-file ()
    "Renames both current buffer and the file it's visiting."
    (interactive
     (progn
       (if (not (buffer-file-name))
	   (error "Buffer '%s' is not visiting a file!" (buffer-name)))
       (let ((new-file-name (read-file-name "Rename current file to: " (file-name-directory buffer-file-name)))
	     )
	 (message "Current file renamed to %s." new-file-name)
	 (rename-file buffer-file-name new-file-name)
	 (rename-buffer new-file-name)
	 (set-visited-file-name new-file-name)
	 (set-buffer-modified-p nil)
	 (setq default-directory (file-name-directory new-file-name))
	 ))))

  (defun delete-current-file ()
    "Deletes the current buffer and the file it's visiting."
    (interactive
     (progn
       (if (not (buffer-file-name))
	   (error "Buffer '%s' is not visiting a file!" (buffer-name)))
       (delete-file buffer-file-name)
       (kill-buffer)
       )))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;; alternative command version
    (defun my-norm@q ()
      "Apply macro in q register on selected lines."
      (interactive)
      (evil-ex-normal (region-beginning) (region-end) "@q"))

  (defun reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))

    ;; (general-define-key
    ;;  :states '(visual global)
    ;;  "Q" 'my-norm@q)
#+END_SRC

* End
The End
