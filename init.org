#+TITLE: Emacs configuration file
#+AUTHOR: Matthias Schmitt
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle yes :comments link


This is my emacs configuration file in literate style as an org mode file.

* Preface

#+BEGIN_SRC emacs-lisp :shebang ";; -*- lexical-binding: t; -*-"
#+END_SRC

** Tangle
   
Automatically reload the configuration after changes to the =init.org= file.

#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (interactive)
    (when (equal (buffer-file-name)
                 (expand-file-name "init.org" user-emacs-directory))
      (let ((prog-mode-hook nil)) ;; Avoid running hooks when tangling.
        (org-babel-tangle)
        ;; (byte-compile-file (expand-file-name "init.el" user-emacs-directory))
        )))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

*** TODO why are there use-package errors when using byte-compile-file
* Initial Stuff
** Start up
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC

** Init Time

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "Emacs ready in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))
#+end_src

** Garbage Collection

In =early-init.el= `gc-cons-threshold' is set to a high value
this should improve startup time by reducing the number of GC runs.
After startup reset it to reasonable value

#+BEGIN_SRC emacs-lisp
  ;; (message (format "%s - %s" gc-cons-threshold gc-cons-percentage))
  (setq garbage-collection-messages t)

  (add-hook 'focus-out-hook 'garbage-collect)
#+END_SRC

** Package management & straight.el

Bootstrap straight.el

#+BEGIN_SRC emacs-lisp
  (setq straight-recipes-gnu-elpa-use-mirror t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Use ~straight.el~ together with ~use-package~

Package `use-package' provides a handy macro by the same name which
is essentially a wrapper around `with-eval-after-load' with a lot
of handy syntactic sugar and useful features.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (straight-use-package 'use-package))

  ;; Tell `use-package' to always load features lazily unless told
  ;; otherwise. It's nicer to have this kind of thing be deterministic:
  ;; if `:demand' is present, the loading is eager; otherwise, the
  ;; loading is lazy. See
  ;; https://github.com/jwiegley/use-package#notes-about-lazy-loading.
  (setq use-package-always-defer t)

  ;; When configuring a feature with `use-package', also tell
  ;; straight.el to install a package of the same name, unless otherwise
  ;; specified using the `:straight' keyword.
  (setq straight-use-package-by-default t)

  ;; (setq use-package-compute-statistics t)
  (setq use-package-verbose t)
#+END_SRC

** Custom

Don't clobber the init.el file
use a own file for emacs custom definition

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

** Basic packages
*** diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand)
#+END_SRC

*** general

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand
    :config
    (general-evil-setup t)

    (defconst my-menu-key "SPC")
    (defconst my-non-normal-menu-key "M-SPC")
    (general-create-definer my-menu-def
      :keymaps 'override
      :states '(motion insert emacs)
      :prefix my-menu-key
      :non-normal-prefix my-non-normal-menu-key)
    (my-menu-def
      "?" '(general-describe-keybindings :which-key "show bindings"))

    (defconst my-leader-key ",")
    (defconst my-non-normal-leader-key "M-,")
    (general-create-definer my-leader-def
      :keymaps 'local
      :states '(motion insert)
      :prefix my-leader-key
      :non-normal-prefix my-non-normal-leader-key)
    (general-mmap
      "," nil ;evil-repeat-find-char-reverse
      ))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand
    :general
    (my-menu-def
      "H K" 'which-key-show-keymap
      "H T" 'which-key-show-top-level)
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC

*** epkg

#+BEGIN_SRC emacs-lisp
  (use-package epkg
    :defer t
    ;; on func epkg-list-packages)
    )
#+END_SRC

*** bug hunter

#+begin_src emacs-lisp
  (use-package bug-hunter
    :defer 30)
#+end_src

*** exec-path-from-shell

https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand
    :config
    (add-to-list 'exec-path-from-shell-variables '"MOZ_ENABLE_WAYLAND")
    (add-to-list 'exec-path-from-shell-variables '"QT_QPA_PLATFORM")
    (exec-path-from-shell-initialize))
#+end_src

* Saving
** Backup

#+BEGIN_SRC emacs-lisp
  (defvar user-backup-directory (expand-file-name ".cache/backups" user-emacs-directory))
  (make-directory user-backup-directory 'noerror)
  (setq backup-directory-alist `(("." . ,user-backup-directory)))
  (setq make-backup-files t      ; backup of a file the first time it is saved.
        backup-by-copying t      ; don't clobber symlinks
        version-control t        ; version numbers for backup files
        delete-old-versions t    ; delete excess backup files silently
        ;; delete-by-moving-to-tr
        kept-old-versions 6      ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9      ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t      ; auto-save every buffer that visits a file
        auto-save-timeout 20     ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200   ; number of keystrokes between auto-saves (default: 300)
    )
#+END_SRC

** Undo history

#+BEGIN_SRC emacs-lisp
  (defvar user-undo-directory (expand-file-name ".cache/undo" user-emacs-directory))
  (make-directory user-undo-directory 'noerror)
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist `(("." . ,user-undo-directory)))
  (setq undo-tree-history-directory-alist (list (cons "." user-undo-directory)))
#+END_SRC

** File history

#+begin_src emacs-lisp
  (save-place-mode 1) ;; save last cursor position
  (savehist-mode 1) ;; save minibuffer history
#+end_src

*** recentf

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 200 ;; MRU configs
        recentf-max-saved-items 200
        recentf-exclude '("recentf" "autoload" "emacs-customizations.el"))
#+end_src

** Lockfile

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

* Navigation & Search
** Buffer & Window menu

#+BEGIN_SRC emacs-lisp
  (my-menu-def
    "TAB" '(mode-line-other-buffer :which-key "last-buffer")
    "M-TAB" '((lambda () (interactive (switch-to-buffer-other-window (other-buffer))))
	      :which-key "last-buffer-other-window")

    "B" '(:ignore t :which-key "Buffer")
    "B m" '((lambda () (interactive) (switch-to-buffer "*Messages*"))
	    :which-key "messages")
    "B M" '((lambda () (interactive) (switch-to-buffer-other-window "*Messages*"))
	    :which-key "messages-in-other")
    "B s" '((lambda () (interactive) (switch-to-buffer "*scratch*"))
	    :which-key "scratch")
    "B S" '((lambda () (interactive) (switch-to-buffer-other-window "*scratch*"))
	    :which-key "scratch-in-other")
    "B w" '((lambda () (interactive) (switch-to-buffer "*Warnings*"))
	    :which-key "warnings")
    "B W" '((lambda () (interactive) (switch-to-buffer-other-window "*Warnings*"))
	    :which-key "warnings-in-other")
    "B d" 'kill-current-buffer
    "B D" 'evil-delete-buffer
    "B r" 'revert-buffer
    "B q" 'quit-window
    "B k" 'kill-current-buffer

    "d" 'kill-current-buffer
    "q" 'evil-window-delete

    "x"  (general-simulate-key "C-x")

    "w" 'other-window
    ;; "W"  (general-simulate-key "C-w")
    "W" '(:ignore t :which-key "Window")
    "W d" 'delete-window
    "W o" 'delete-other-windows)
#+end_src

** abo-abo
[[http://oremacs.com/swiper/][ivy & swiper manual]]
*** ivy

‘M-o’      (‘ivy-dispatching-done’)
‘C-M-j’    (‘ivy-immediate-done’)
‘M-j’      (‘ivy-yank-word’)
‘C-r’      (‘ivy-reverse-i-search’)
‘M-w’      (‘ivy-kill-ring-save’)
‘C-c C-o’  (‘ivy-occur’)
‘M-r’      (‘ivy-toggle-regexp-quote’)
‘~~’       (local home directory)

#+begin_src emacs-lisp
  (use-package ivy
    :demand
    :diminish ivy-mode
    :general
    (my-menu-def
      "b" '(ivy-switch-buffer :which-key "Buffer")
      "W p" '(:ignore t :which-key "ivy-view")
      "W pu" 'ivy-push-view
      "W po" 'ivy-pop-view
      "W w" 'ivy-switch-view)

    (general-def
      :keymaps 'ivy-minibuffer-map
      "C-l" 'ivy-alt-done
      "C-h" 'ivy-backward-delete-char
      "ESC" 'minibuffer-keyboard-quit
      "<escape>" 'minibuffer-keyboard-quit
      "C-RET" 'ivy-immediate-done
      "<C-return>" 'ivy-immediate-done
      "C-SPC" 'nil
      "C-TAB" 'ivy-insert-current
      "<C-tab>" 'ivy-insert-current
      "<M-o>" 'ivy-dispatching-done ;; TODO why does this not work?
      "<M-return>" 'ivy-dispatching-done)

    (general-def
      :keymaps 'ivy-occur-grep-mode-map
      "SPC" nil)

    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-extra-directories nil)
    (setq ivy-wrap t)

    (defun maschm/ivy-append-action (x)
      (with-ivy-window 
        (progn
          (evil-append 0)
          (insert x)
          (evil-normal-state))))

    (ivy-set-actions
     t '(("i" #[257 "\211;\203	\0\211\202\0\211@c\207" [] 2 "\n\n(fn X)"] "insert")
         ("w" #[257 "\300;\203\n\0\202\f\0@!\207" [kill-new] 3 "\n\n(fn X)"] "copy")
         ("a" maschm/ivy-append-action "append"))))

  (use-package ivy-hydra
    :defer 15
    :after (ivy hydra)
    :commands (hydra-ivy/body))

  (use-package prescient
    :demand
    :after ivy
    :config (setq prescient-filter-method 'literal+initialism))

  (use-package ivy-prescient
    :demand
    :after (prescient ivy)
    :config (ivy-prescient-mode t))

  (use-package ivy-rich
    :demand
    :after (ivy counsel)
    :config
    (ivy-rich-mode 1)
    (setq ivy-rich-parse-remote-buffer nil))
#+end_src

**** TODO fix ivy-occur
dired keymap is set to overriding and no ivy-occur cmd can be used

*** counsel

#+begin_src emacs-lisp
  (use-package counsel
    :demand
    :diminish counsel-mode
    :general
    (my-menu-def
      "f" '(:ignore t :which-key "File")
      "f" 'counsel-find-file
      "F" '(:ignore t :which-key "File")
      "F r" '(counsel-recentf :which-key "recent")
      "r" '(counsel-recentf :which-key "recent")
      "SPC" '(counsel-M-x :which-key "M-x"))
    (general-def
      :keymaps 'global
      "C-x f" 'counsel-find-file ;; replace set-fill-colum
      "C-x C-r" 'counsel-recentf)
    :config
    (counsel-mode)
    (custom-reevaluate-setting 'ivy-initial-inputs-alist))

  (use-package counsel-tramp
    :defer 15
    :after counsel
    :general
    (my-menu-def
      "F t" 'counsel-tramp)
    :config
    (setq tramp-default-method "ssh"))
#+end_src

get back to the local file system when in find-file while using tramp
use =/ C-j= or =~ //= to get to the local / directory

*** swiper

#+begin_src emacs-lisp
  (use-package swiper
    :defer 15
    :general
    (general-def
      :keymaps 'global
      :states 'motion
      "C-s" 'maschm/evil-swiper
      "C-*" 'maschm/evil-swiper-thing-at-point))


  (defun maschm/evil-swiper ()
    (interactive)
    (if (region-active-p)
      (swiper (buffer-substring (region-beginning) (region-end)))
      (swiper)))

  (defun maschm/evil-swiper-thing-at-point ()
    (interactive)
    (if (region-active-p)
      (swiper (buffer-substring (region-beginning) (region-end)))
      (swiper-thing-at-point)))
#+end_src

*** avy

#+begin_src emacs-lisp
  (use-package avy
    :defer 15
    :commands (avy-goto-char-2 avy-goto-char-timer avy-goto-line)
    :general
    (general-def
      :states 'motion
      "g O" 'avy-goto-char-2
      "g o" 'avy-goto-char-timer))
#+end_src

*** hydra

#+begin_src emacs-lisp
  (use-package hydra
    :defer 15)
#+end_src

** winner
   undo and redo for window operations

#+begin_src emacs-lisp
  (use-package winner
    :demand
    :general
    (my-menu-def
      "W u" 'winner-undo
      "W r" 'winner-redo)
    :config (winner-mode 1))
#+end_src

** link-hint

#+BEGIN_SRC emacs-lisp
  (use-package link-hint
    :after avy
    :general
    (my-menu-def
      "l" '(link-hint-open-link :which-key "link-hint")))
#+END_SRC

** Symbol

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :defer 15
    :general
    (my-menu-def
      "s" '(:ignore t :which-key "Symbol")
      "s" (general-key-dispatch 'symbol-overlay-put
            :timeout .33
            "n" 'symbol-overlay-jump-next
            "p" 'symbol-overlay-jump-prev
            "d" 'symbol-overlay-remove-all
            "r" 'symbol-overlay-rename)

      "S" '(:ignore t :which-key "Symbol")
      "S s" 'symbol-overlay-mode
      "S n" 'symbol-overlay-jump-next
      "S p" 'symbol-overlay-jump-prev
      "S d" 'symbol-overlay-remove-all
      "S r" 'symbol-overlay-rename))
#+end_src
*** TODO symbol-overlay hydra
    Or use swiper to got to symbol?
** projectile

TODO [[https://github.com/technomancy/find-file-in-project][find-file-in-project]] vs projectile

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :demand
    :diminish (projectile-mode)
    :general
    (my-menu-def
      "p" 'projectile-find-file
      "P" '(:ignore t :which-key "Project")
      "P p" 'projectile-switch-project
      "P c" 'projectile-compile-project
      "P r" 'projectile-run-project
      "P t" 'projectile-test-project)
    :config
    (projectile-mode +1)
    (setq projectile-completion-system 'ivy)
    (setq projectile-generic-command "fd -H --ignore-file .projectile -t f -0")
    ;; (setq projectile-indexing-method 'turbo-alien)
    (setq projectile-project-search-path '("~/proj/")))

  (use-package counsel-projectile
    :demand
    :after (counsel projectile)
    :general
    (my-menu-def
      "p" 'counsel-projectile
      "P p" 'counsel-projectile-switch-project
      "/" '(counsel-projectile-rg :which-key "search proj"))
    :config
    (counsel-projectile-mode)
    (setq counsel-projectile-rg-initial-input
          '(when (evil-visual-state-p)
             (buffer-substring-no-properties
              (evil-range-beginning (evil-visual-range))
              (evil-range-end (evil-visual-range))))))
#+END_SRC

** wgrep

#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :defer 5)
#+END_SRC

** TODO pair programming
   https://github.com/tjim/lockstep
* Evil
** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :demand
    :diminish undo-tree-mode
    :general
    (general-def
      :states 'normal
      "U" 'undo-tree-visualize)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t)
    :config
    (general-def
      :keymaps 'undo-tree-visualizer-mode-map
      "k" 'undo-tree-visualize-undo
      "j" 'undo-tree-visualize-redo)
    (global-undo-tree-mode +1))
#+end_src

** evil-mode
https://github.com/emacs-evil/evil-collection

https://github.com/noctuid/evil-guide

#+begin_src emacs-lisp
  (use-package evil
    :demand
    :init
    (setq evil-want-C-w-delete nil)
    (setq evil-want-C-w-in-emacs-state t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (cl-loop for (mode . state) in
             '((term-mode . emacs)
               (compilation-mode . motion))
             do (evil-set-initial-state mode state))
    (evil-set-command-property 'evil-yank :move-point t)
    (setq evil-echo-state nil)
    (setq evil-ex-substitute-global t)
    (setq evil-vsplit-window-right t)

    (general-mmap
      "SPC" nil
      "RET" nil
      "TAB" 'evil-jump-forward  ; "TAB" is "C-i" which is the tab-key in terminal mode
                                ; use "<tab>" to bind to only the tab-key in gui mode
      )
    )
#+END_SRC

** Vim goodies
*** visual line

#+begin_src emacs-lisp
  (general-mmap
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
  (general-mmap
    "gj" 'evil-next-line
    "gk" 'evil-previous-line)
#+end_src

*** Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC

*** center search result
Equivalent of ~nnoremap n nzz~

#+BEGIN_SRC emacs-lisp
  (defun my-center-line (&rest _)
    (evil-scroll-line-to-center nil))

  (advice-add 'evil-search-next :after #'my-center-line)
#+END_SRC

*** continuous shifting
Use < in visual mode to continuously shift selection

#+begin_src emacs-lisp
  (defun maschm/visual-restore-after-shift (&rest _)
    "Restore visual selection."
    (if (evil-visual-state-p)
	(progn
	  (evil-normal-state)
	  (evil-visual-restore))))

  (advice-add 'evil-shift-right :after #'maschm/visual-restore-after-shift)
  ;; (advice-remove 'evil-shift-right #'maschm/visual-restore-after-shift)
#+end_src

** Evil packages

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :demand
    :diminish (evil-commentary-mode)
    :config (evil-commentary-mode))

  (use-package evil-surround
    :demand
    :config (global-evil-surround-mode 1))

  (use-package evil-numbers
    :demand)

  (use-package evil-matchit
    :demand
    :config (global-evil-matchit-mode 1))

  (use-package smartparens
    :demand)

  (use-package evil-smartparens
    :demand
    :after (evil smartparens)
    :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))

  (use-package evil-mc
    :demand
    :diminish emc
    :config
    ;; (global-evil-mc-mode 1)
    ;; (add-hook 'magit-mode-hook #'evil-mc-mode -1)
    (advice-add 'evil-mc-define-vars :after
                (lambda ()
                  (add-to-list 'evil-mc-incompatible-minor-modes 'auto-fill-mode))))

  (use-package evil-visualstar
    :demand
    :config (global-evil-visualstar-mode))

  (use-package evil-lion
    :general
    (general-def
      :keymaps 'normal
      "g l" 'evil-lion-left
      "g L" 'evil-lion-right))

  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC

* Org
** org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer 60
    :general
    (my-menu-def
      "o" '(:ignore t :which-key "org-outline")
      "o" (general-key-dispatch 'counsel-outline
            :timeout .33
            "a" 'org-agenda
            "c" 'org-capture)

      "O" '(:ignore t :which-key "org")
      "O a" 'org-agenda
      "O c" 'org-capture
      "O l" 'org-insert-link
      "O L" 'org-store-link
      "O T" '(org-timer-set-timer :which-key "timer"))

    (general-def
      :keymaps 'global
      "C-c c" 'org-capture
      "C-c a" 'org-agenda
      "C-c l" 'org-store-link)

    :config
    (my-leader-def
      :keymaps 'org-mode-map
      "n" '(:ignore t :which-key "org narrow")
      "ns" 'org-narrow-to-subtree
      "nb" 'org-narrow-to-block
      "ne" 'org-narrow-to-element
      "nn" 'org-toggle-narrow-to-subtree
      "s" 'org-sparse-tree
      "t" 'org-insert-structure-template
      "T" '(:ignore t :which-key "toogle")
      "Tp" 'org-toggle-pretty-entities
      "Ti" 'org-toggle-inline-images
      "Tl" 'org-latex-preview
      "," 'org-edit-special)

    (my-leader-def
      :keymaps 'org-src-mode-map 
      :states nil
      "," 'org-edit-src-exit)

    (setq org-directory "~/org/")
    (setq org-return-follows-link t)
    (setq org-startup-folded t)
    (setq org-pretty-entities t)
    (setq org-image-actual-width 300)
    (setq org-export-with-smart-quotes t)

    (setq org-default-notes-file (expand-file-name "inbox.org" org-directory))
    (setq org-agenda-files '("~/org/inbox.org"
                             "~/org/gtd.org"
                             "~/org/tickler.org"))
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/org/inbox.org" "Tasks")
                                   "* TODO %i%?")
                                  ("m" "Mail Todo [inbox]" entry
                                   (file+headline "~/org/inbox.org" "Tasks")
                                   "* TODO %i%?\n%a\n")
                                  ("T" "Tickler" entry
                                   (file+headline "~/org/tickler.org" "Tickler")
                                   "* %i%? \n %U")))
    (setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                               ("~/org/someday.org" :level . 1)
                               ("~/org/tickler.org" :maxlevel . 2)))
    (setq org-tag-alist '(("@home" . ?h) ("@uni" . ?u) ("@work" . ?w)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)

    (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sp" . "src python"))
    (add-to-list 'org-structure-template-alist '("sr" . "src R"))
    (add-to-list 'org-structure-template-alist '("sj" . "src julia"))
    (add-to-list 'org-structure-template-alist '("sl" . "src latex"))
    (add-to-list 'org-structure-template-alist '("ss" . "src sh"))
    (add-to-list 'org-structure-template-alist '("sg" . "src gnuplot"))
    (add-to-list 'org-structure-template-alist '("su" . "src plantuml"))
    (add-to-list 'org-structure-template-alist '("sd" . "src dot"))

    ;; (require 'org-tempo)
    ;;(add-to-list 'org-tempo-keywords-alist '("B" . "beamer"))

    (setq org-entities-user
          '(("C" "\\mathbb{C}" t "C" "[C]" "[C]" "ℂ")
            ("E" "\\mathbb{E}" t "E" "[E]" "[E]" "𝔼")
            ("F" "\\mathbb{F}" t "F" "[F]" "[F]" "𝔽")
            ("H" "\\mathbb{H}" t "H" "[H]" "[H]" "ℍ")
            ("I" "\\mathbb{I}" t "I" "[I]" "[I]" "𝕀")
            ("N" "\\mathbb{N}" t "N" "[N]" "[N]" "ℕ")
            ("P" "\\mathbb{P}" t "P" "[P]" "[P]" "ℙ")
            ("Q" "\\mathbb{Q}" t "Q" "[Q]" "[Q]" "ℚ")
            ("R" "\\mathbb{R}" t "R" "[R]" "[R]" "ℝ")
            ("U" "\\mathbb{U}" t "U" "[U]" "[U]" "𝕌")
            ("Z" "\\mathbb{Z}" t "Z" "[Z]" "[Z]" "ℤ")
            ("sqrt" "\\sqrt{\\,}" t "&radic;" "[square root]" "[square root]" "√")))
    )

  (use-package evil-org
    :after (evil org)
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    :local
    (evil-org-set-key-theme))

  (use-package htmlize
    :after (org)
    :defer 20)
#+END_SRC

** org babel

#+begin_src emacs-lisp
  (eval-after-load 'org
    '(progn
       (setq org-ditaa-jar-path (expand-file-name
                                 "straight/repos/org/contrib/scripts/ditaa.jar"
                                 user-emacs-directory))
       (setq org-plantuml-jar-path (expand-file-name "plantuml.jar" user-emacs-directory))

       ;;(require 'gnuplot)
       (add-to-list 'org-babel-load-languages '(shell . t))
       (add-to-list 'org-babel-load-languages '(python . t))
       (add-to-list 'org-babel-load-languages '(R . t))
       (add-to-list 'org-babel-load-languages '(ditaa . t))
       (add-to-list 'org-babel-load-languages '(dot . t))
       (add-to-list 'org-babel-load-languages '(gnuplot . t))
       (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
       (add-to-list 'org-babel-load-languages '(plantuml . t))

       (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)))

  (use-package ob-async
    :after ob)
#+end_src

** org export

#+begin_src emacs-lisp
  (eval-after-load 'org
    '(progn
       (setq org-latex-caption-above nil)))
#+end_src

** TODO org-ref

#+begin_src emacs-lisp
  ;; (use-package org-ref
  ;;   :after org)
#+end_src

** org-beamer

#+begin_src emacs-lisp
  (setq org-beamer-frame-default-options "")
#+end_src

** org-reveal

#+begin_src emacs-lisp
  (use-package ox-reveal
    :defer 20
    :config
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src

** org-caldav

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer 15
    :config
    (setq org-caldav-url "https://posteo.de:8443/calendars/male.schmitt"
	  org-caldav-calendar-id "default"
	  org-caldav-inbox "~/org/cal.org"
	  org-caldav-files '("~/org/tickler.org")
	  org-caldav-save-directory "~/org"
	  org-icalendar-timezone "Europe/Berlin"
	  org-caldav-delete-calendar-entries 'ask))
#+END_SRC

** org-brain

#+begin_src emacs-lisp
  (use-package org-brain
    :after (org)
    :defer 15
    :general
    (my-menu-def
      "O b" 'org-brain-goto
      "O v" 'org-brain-visualize)
    :init
    (setq org-brain-path "~/org/brain")
    :config
    (setq org-id-track-globally t)
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
    (setq org-id-locations-file (expand-file-name ".org-id-locations" user-emacs-directory))
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 0))
#+end_src

* Git
** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer 30
    :general
    (my-menu-def
      "g" '(:ignore t :which-key "git/vc")
      "g s" 'magit-status
      "g b" 'magit-blame
      "g d" 'magit-diff-buffer-file
      "g l" 'magit-log-buffer-file)
    (general-def
      :keymaps 'magit-mode-map
      "SPC" nil)
    :config
    (setq magit-completing-read-function 'ivy-completing-read)
    (setq magit-diff-refine-hunk t)
    :local
    (git-commit-mode-hook . ((setq-local ispell-local-dictionary "en"))))

  (use-package evil-magit
    :demand
    :after (evil magit))
#+END_SRC

** Forge

#+BEGIN_SRC emacs-lisp
  (use-package ghub
    :demand)

  (use-package forge
    :demand
    :after (magit ghub))
#+END_SRC

** Additional

#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :after magit)
  ;; (use-package git-gutter-fringe+
  ;;   :init (global-git-gutter-fringe+-mode)
  ;;   )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package orgit
    :after (org magit))
#+END_SRC

* Mail
** mu4e

#+begin_src emacs-lisp
  (use-package mu4e
    :defer 15
    :general
    (my-menu-def
      "m" '(mu4e :which-key "mail")
      "M" '(:ignore t :which-key "Mail")
      "M u" '(mu4e-update-mail-and-index :which-key "update")
      "M g" '(mu4e-headers-search-bookmark :which-key "bookmarks")
      "M t" '((lambda () (interactive) (mu4e-headers-search (mu4e-get-bookmark-query  ?t)))
              :which-key "today")
      "M w" '((lambda () (interactive) (mu4e-headers-search (mu4e-get-bookmark-query  ?w)))
              :which-key "this week")
      "M U" '((lambda () (interactive) (mu4e-headers-search (mu4e-get-bookmark-query  ?u)))
              :which-key "unread")
      "M j" '(mu4e~headers-jump-to-maildir :which-key "jump")
      "M J" '(mu4e~headers-jump-to-maildir :which-key "jump")
      "M c" '(mu4e-compose-new :which-key "compose")
      "M C" '(mu4e-compose-new :which-key "compose"))
    :config
    (general-def
      :keymaps 'mu4e-main-mode-map
      "/" 'mu4e-headers-search
      "j" nil
      "J" 'mu4e~headers-jump-to-maildir
      "g r" 'mu4e-update-mail-and-index)
    (general-def
      :keymaps 'mu4e-headers-mode-map
      "SPC" nil
      "/" 'mu4e-headers-search
      "j" nil
      "J" 'mu4e~headers-jump-to-maildir
      "g" nil
      "g s" 'mu4e-headers-rerun-search
      "g r" 'mu4e-update-mail-and-index)
    (general-def
      :keymaps 'mu4e-view-mode-map
      "SPC" nil
      "j" nil
      "J" 'mu4e~headers-jump-to-maildir
      "h" nil
      "H" 'mu4e-view-toggle-html
      "g" nil
      "g r" 'mu4e-update-mail-and-index
      "k" nil ;; mu4e-view-save-url
      "y" nil ;; mu4e-select-other-view
      "v" nil ;; mu4e-view-verify-msg-popup
      "b" nil ;; mu4e-headers-search-bookmark
      "w" nil ;; visual-line-mode
      "g" nil ;; mu4e-view-go-to-url
      "0" nil
      "z" nil)

    (evil-make-overriding-map mu4e-main-mode-map 'normal)
    (evil-set-initial-state 'mu4e-main-mode 'normal)
    (evil-make-overriding-map mu4e-headers-mode-map 'normal)
    (evil-set-initial-state 'mu4e-headers-mode 'normal)
    (evil-make-overriding-map mu4e-view-mode-map 'normal)
    (evil-set-initial-state 'mu4e-view-mode 'normal)
    (setq mu4e-completing-read-function 'ivy-completing-read)

    ;; (setq mu4e-maildir-shortcuts
    ;; 	'( ("/posteo/Inbox" . ?p)
    ;; 	   ("/uni/Inbox" . ?u)))

    (add-hook 'mu4e-view-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-view-mode-hook 'visual-fill-column-mode)
    (setq mu4e-view-html-plaintext-ratio-heuristic most-positive-fixnum)
    (setq shr-color-visible-luminance-min 80) ;; make html background more readable

    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-maildir "~/.mail")
    (setq mu4e-get-mail-command "mbsync -a")
    (setq quick-get-mail-command "mbsync posteo:INBOX uni:INBOX")
    (setq mu4e-change-filenames-when-moving t) ;; needed by mbsync
    (setq mu4e-attachment-dir  "~/dld")
    (setq mu4e-view-show-addresses 't)
    (setq mu4e-headers-time-format "%T") ;; like "%H:%M:%S"
    (setq mu4e-headers-date-format "%F") ;; like "%Y-%m-%d"

    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-default-smtp-server "posteo.de"
          smtpmail-smtp-server "posteo.de"
          smtpmail-stream-type 'starttls
          smtpmail-smtp-service 587
          smtpmail-debug-info t
          smtpmail-debug-verbose t)

    (setq mu4e-user-mail-address-list '("male.schmitt@posteo.de" "uydvo@student.kit.edu"))
    (setq mu4e-contexts
      `( ,(make-mu4e-context
           :name "posteo"
           :enter-func (lambda () (mu4e-message "Entering posteo context"))
           :leave-func (lambda () (mu4e-message "Leaving posteo context"))
           :match-func (lambda (msg)
                 (when msg
                   (string-match-p "^/posteo" (mu4e-message-field msg :maildir))))
           :vars '( ( user-mail-address  . "male.schmitt@posteo.de"  )
            ( user-full-name     . "Matthias Schmitt" )
            ( mu4e-sent-folder   . "/posteo/Sent")
            ( mu4e-drafts-folder . "/posteo/Drafts")
            ( mu4e-trash-folder  . "/posteo/Trash")
            ( mu4e-refile-folder . "/posteo/Archive")
            ( smtpmail-smtp-server . "posteo.de"))
           )
         ,(make-mu4e-context
           :name "uni"
           :enter-func (lambda () (mu4e-message "Entering uni context"))
           :leave-func (lambda () (mu4e-message "Leaving uni context"))
           :match-func (lambda (msg)
                 (when msg
                   (string-match-p "^/uni" (mu4e-message-field msg :maildir))))
           :vars '( ( user-mail-address  . "uydvo@student.kit.edu"  )
            ( user-full-name     . "Matthias Schmitt" )
            ( mu4e-sent-folder   . "/uni/Sent")
            ( mu4e-drafts-folder . "/uni/Drafts")
            ( mu4e-trash-folder  . "/uni/Trash")
            ( mu4e-refile-folder . "/uni/Archives")
            ( smtpmail-smtp-server . "smtp.kit.edu"))
           )))
    (setq mu4e-context-policy 'ask-if-none)
    (setq mu4e-compose-context-policy 'ask)
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-confirm-quit nil)

    (setq mu4e-index-cleanup nil      ;; don't do a full cleanup check
          mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs

    (setq mu4e-bookmarks
      `(,(make-mu4e-bookmark
          :name  "Unread messages"
          :query "flag:unread AND NOT flag:trashed AND NOT maildir:/posteo/Spam AND NOT maildir:/uni/Junk\\ E-Mail"
          :key ?u)
        ,(make-mu4e-bookmark
          :name "Today's messages"
          :query "date:today..now AND NOT maildir:/posteo/Spam AND NOT maildir:/uni/Junk\\ E-Mail"
          :key ?t)
        ,(make-mu4e-bookmark
          :name "Last 7 days"
          :query "date:7d..now AND NOT flag:trashed AND NOT maildir:/posteo/Spam AND NOT maildir:/uni/Junk\\ E-Mail"
          :key ?w)
        ,(make-mu4e-bookmark
          :name "Sent"
          :query "maildir:/posteo/Sent OR maildir:/uni/Sent"
          :key ?s)))

    :local
    (mu4e-compose-mode-hook . ((setq-local ispell-local-dictionary "de_DE"))))
#+end_src

#+begin_src emacs-lisp
  (defun maschm/mu4e-make-message-draft ()
    (interactive)
    (let* ((msg (mu4e-message-at-point 'noerror))
           (docid (mu4e-message-field msg :docid)))
      (mu4e~proc-move docid nil "+D")))
#+end_src

** Additional mu4e packages

#+begin_src emacs-lisp
  ;; (use-package org-mu4e
  ;;   :after mu4e)

  (use-package mu4e-maildirs-extension
    :after mu4e
    :config
    (setq mu4e-maildirs-extension-toggle-maildir-key (kbd "TAB"))
    (setq mu4e-maildirs-extension-custom-list '(
						"/posteo/Drafts"
						"/posteo/Git"
						"/posteo/Inbox"
						"/posteo/Politik"
						"/posteo/Queue"
						"/posteo/Sent"
						"/posteo/Spam"
						"/posteo/Trash"

						"/uni/Deleted Items"
						"/uni/Drafts"
						"/uni/Inbox"
						"/uni/Junk E-Mail"
						"/uni/Papierkorb"
						"/uni/Queue"
						"/uni/Sent"
						"/uni/Sent"
						"/uni/Outbox"
						"/uni/Trash"))

    (mu4e-maildirs-extension)
    )

  (use-package mu4e-alert
    :after mu4e
    :config
    (mu4e-alert-set-default-style 'libnotify)
    (mu4e-alert-enable-notifications))

  (use-package mu4e-conversation
    :after mu4e
    :config
    (global-mu4e-conversation-mode))

#+end_src

* Visual
** Font

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Hack-12"))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat t)
  ;; (disable-theme 'doom-nord)
  ;; (setq frame-background-mode nil)
  ;; (setq frame-background-mode 'dark)
  ;; (mapc 'frame-set-background-mode (frame-list))

#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :demand
    :config (minions-mode 1))

  (use-package moody
    :demand
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC
** Fringe

#+BEGIN_SRC emacs-lisp
  (setq indicate-buffer-boundaries 'left)
#+END_SRC

** Scale

this or https://github.com/purcell/default-text-scale/blob/master/default-text-scale.el

#+begin_src emacs-lisp
  (defcustom default-text-scale-amount 10
    "Increment by which to adjust the :height of the default face."
    :type 'integer)

  (defun default-text-scale-increase ()
    "Increase the height of the default face by `default-text-scale-amount'."
    (interactive)
    (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) default-text-scale-amount)))

  (defun default-text-scale-decrease ()
    "Decrease the height of the default face by `default-text-scale-amount'."
    (interactive)
    (set-face-attribute 'default nil :height (- (face-attribute 'default :height) default-text-scale-amount)))

  (defvar default-text-scale-pre nil)
  (general-after-gui
    (setq default-text-scale-pre (face-attribute 'default :height)))

  (defun default-text-scale-reset ()
    "Reset the height of the default face."
    (interactive)
    (set-face-attribute 'default nil :height default-text-scale-pre))
#+end_src

*** Hydra

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom ()
    "
^Frame zooming^       ^Buffer scaling^
_+_: zoom in        _i_: scale in
_-_: zoom out       _d_: scale out
_=_: zoom reset     _r_: scale reset
"
    ("+" default-text-scale-increase nil)
    ("-" default-text-scale-decrease nil)
    ("=" default-text-scale-reset nil)
    ("i" text-scale-increase nil)
    ("d" text-scale-decrease nil)
    ("r" (text-scale-increase 0) nil))
    
  (my-menu-def "T z" '(hydra-zoom/body :which-key "Zooming/Scaling"))
#+END_SRC

** Scrolling
from https://github.com/DiegoVicen/my-emacs#Fix-scroll

#+begin_src emacs-lisp
  (setq scroll-step 1
        scroll-conservatively 10000
        mouse-wheel-scroll-amount '(1 ((shift) . 1))
        mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse 't)
#+end_src

** Dashboard

https://github.com/emacs-dashboard/emacs-dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :demand
    :general
    (:keymaps 'dashboard-mode-map
              "SPC" nil
	      "DEL" nil)
    :config
    (evil-make-overriding-map dashboard-mode-map 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (dashboard-setup-startup-hook)
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

** Other

Turn off mouse interface early in startup to avoid momentary display.

#+BEGIN_SRC emacs-lisp
  (tooltip-mode -1)
#+END_SRC

Highlight trailing whitespace

#+BEGIN_SRC emacs-lisp
  (setq show-trailing-whitespace t)
#+END_SRC

Highlight delimiters such as parentheses, brackets or braces according to their depth

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer 15
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

Display line numbers in programming modes

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Display '~' on empty lines like in vi (only in programming modes)

#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :defer 15
    :hook (prog-mode . vi-tilde-fringe-mode))
#+END_SRC

* Completion

https://company-mode.github.io/

https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-in-Buffers.html

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 15
    :diminish yas-minor-mode
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package auto-yasnippet
    :after yasnippet
    :config (setq aya-case-fold t))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer 30)

  (use-package company-prescient
    :hook (company-mode . company-prescient-mode))

  (use-package pos-tip
    :defer 30)

  (use-package company-quickhelp
    :after (company pos-tip)
    :config (company-quickhelp-mode))
#+END_SRC

** Tags

#+begin_src emacs-lisp
  (use-package counsel-etags
    :general
    (my-menu-def
      "t" '(counsel-etags-find-tag-at-point :which-key "etags"))
    :config
    ;; counsel-etags-ignore-directories does NOT support wildcast
    (add-to-list 'counsel-etags-ignore-directories "build_clang")
    (add-to-list 'counsel-etags-ignore-directories "build_clang")
    ;; counsel-etags-ignore-filenames supports wildcast
    (add-to-list 'counsel-etags-ignore-filenames "TAGS")
    (add-to-list 'counsel-etags-ignore-filenames "*.json"))
#+end_src

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 30
    :general
    (my-menu-def
      "e" '(:ignore t :which-key "Errors")
      "e e" 'flycheck-buffer
      "e b" 'flycheck-buffer
      "e c" 'flycheck-compile
      "e n" 'flycheck-next-error
      "e p" 'flycheck-prev-error))
#+END_SRC

** LSP

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    ;; :disabled
    ;; :hook (prog-mode . lsp)
    :commands lsp)

  (use-package lsp-ui
    :after (lsp-mode)
    :commands lsp-ui-mode)

  (use-package company-lsp
    :after (company lsp-mode)
    :commands company-lsp
    :config (push 'company-lsp company-backends))
#+END_SRC

** Spelling
*** ispell

#+BEGIN_SRC emacs-lisp
  (setq ispell-dictionary "en")
  
  (cond
   ((executable-find "aspell")
    ;; you may also need `ispell-extra-args'
    (setq ispell-program-name "aspell"))
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")

    ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
    ;; it's also used as the key to lookup ispell-local-dictionary-alist
    ;; if we use different dictionary
    (setq-default ispell-local-dictionary "en_US")
    (setq ispell-local-dictionary-alist
	  '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
   (t
    (message "no ispell program")
    (setq ispell-program-name nil)))
#+End_SRC

*** flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook (text-mode . flyspell-mode)
    :config
    ;; do flyspell-buffer after changing the dictionary
    (defun flyspell-buffer-after-change-dict (&rest args)
      (if (< (count-words (point-min) (point-max)) 1000) (flyspell-buffer)))
    (advice-add 'ispell-change-dictionary :after #'flyspell-buffer-after-change-dict)

    ;; ommit error messages on spell checking for performance sake
    (setq flyspell-issue-message-flag nil))
#+End_SRC

* Semantic
** TODO srefactor

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package srefactor
    :defer
    ;;:general
  )
#+END_SRC

* Modes
** dired
https://github.com/emacs-evil/evil-collection/blob/master/modes/dired/evil-collection-dired.el

#+BEGIN_SRC emacs-lisp
  (my-menu-def
    "D" '(dired-jump :which-key "dired"))

  (general-define-key
   :keymaps 'global
   "C-c d" 'dired-jump
   "C-c D" 'dired)


  (general-define-key
   :keymaps 'dired-mode-map
   "SPC" nil
   "I" 'wdired-change-to-wdired-mode
   "g" nil
   "g r" 'revert-buffer
   "g j" 'dired-next-dirline
   "g k" 'dired-prev-dirline)

  (setq dired-listing-switches "--group-directories-first -al")
#+END_SRC

*** wdired

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'wdired-mode-map
   [remap evil-write] 'wdired-finish-edit)

  (general-define-key
   :keymaps 'wdired-mode-map
   :mode 'normal
   "ESC" 'wdired-exit
   "<escape>" 'wdired-exit)

  ;; (evil-make-overriding-map wdired-mode-map 'normal)
#+END_SRC

** info

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'Info-mode-map
   "SPC" nil
   "<tab>" 'Info-next-reference-or-link
   "S-<tab>" 'Info-prev-reference-or-link
   "C-o" 'Info-history-back
   "C-i" 'Info-history-forward

   "h" nil
   "l" nil
   "M-h" 'Info-help
   "w" nil
   "b" nil

   "u" 'Info-up
   "g" nil
   "gj" 'Info-next
   "gk" 'Info-prev
   "gg" 'evil-goto-first-line

   "q" 'Info-exit)

  (evil-make-overriding-map Info-mode-map 'motion)
#+END_SRC

** help

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'help-mode-map
   "SPC" nil

   "C-o" 'help-go-back
   "C-i" 'help-go-forward
   "<" 'help-go-back
   ">" 'help-go-forward
   "r" 'help-follow

   "q" 'quit-window)
#+END_SRC

** TODO view
   [[info:emacs#View%20Mode][info:emacs#View Mode]]
   SPC and S-SPC are bound to scrolling.
   Intentionally disable anyway?
   Which buffer are in view mode?

** messages-buffer
   enable "q" to burry-window in messages-buffer-mode and more generally
   special mode

#+begin_src emacs-lisp
  (evil-set-initial-state 'special-mode 'motion)
  (evil-set-initial-state 'messages-buffer-mode 'motion)
#+end_src

** eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :after (esh-opt)
    :commands (eshell eshell-command)
    :config
    ;; (general-define-key
    ;;  :keymaps 'eshell-mode-map
    ;;  [remap eshell-pcomplete] 'completion-at-point
    ;;  "<tab>" 'completion-at-point)
    ;;  "TAB" 'completion-at-point)
    ;;  "C-r" 'counsel-esh-history)

    ;; (setq pcomplete-ignore-case t)
    (setq eshell-cmpl-ignore-case t)
    ;; (setq pcomplete-autolist t)
    (setq eshell-cmpl-autolist t)
    (setq pcomplete-cycle-cutoff-length 1)
    (setq eshell-cmpl-cycle-cutoff-length 1))

  (use-package eshell-z
    :after eshell)

  (use-package eshell-prompt-extras
    ;; :after (eshell)
    ;; :demand
    :config
    (setq eshell-highlight-prompt nil)
    (setq eshell-prompt-function 'epe-theme-lambda))

  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :general
    (general-def
      :keymaps 'esh-autosuggest-active-map
      "C-e" 'company-complete-selection
      "M-e" 'esh-autosuggest-complete-word))
#+END_SRC

** irc

#+BEGIN_SRC emacs-lisp
  (use-package erc
    :commands (erc erc-tls)
    )

  (setq my-fav-irc '("irc.freenode.net"
		     "irc.oftc.net"
		     "irc.mozilla.org"
		     "irc.gnome.org"))
#+END_SRC

** text-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'text-mode-hook 'visual-line-mode)

  (setq-default fill-column 80)

  (my-leader-def
    :keymaps 'text-mode-map
    :states 'normal
    "f" '(fill-paragraph :which-key "fill"))

  (my-leader-def
    :keymaps 'text-mode-map
    :states 'visual
    "f" '(fill-region :which-key "fill"))

  (defun my-text-mode-setup () ())
  (add-hook 'text-mode-hook 'my-text-mode-setup)
#+END_SRC

*** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :config
    ;; (setq-default split-window-preferred-function 'visual-fill-column-split-window-sensibly)
    ;; (setq visual-fill-column-fringes-outside-margins nil)
  )
#+end_src

*** TODO auto fill on paste
*** TODO fill commands in local menu
** prog-mode

#+begin_src emacs-lisp
  (defun my-prog-mode-setup ()
    (setq-local ispell-local-dictionary "en_US"))

  (add-hook 'prog-mode-hook 'my-prog-mode-setup)
#+end_src

** compilation
When compiling follow the buffer

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  ;; Don't stop on info or warnings.
  (setq compilation-skip-threshold 2)
  ;; Stop on the first error.
  (setq compilation-auto-jump-to-first-error t)
#+END_SRC

** helpful

#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :demand
    :general
    (my-menu-def
      "h" '(helpful-at-point :which-key "help")
      "H" '(:ignore t :which-key "Help")
      "H h" 'helpful-symbol
      "H v" 'helpful-variable
      "H f" 'helpful-function
      "H c" 'helpful-callable
      "H k" 'helpful-key
      "H X" 'helpful-kill-buffers
      "H i" 'info
      "H m" 'describe-mode
      "H V" 'counsel-set-variable
      "H U" 'counsel-unicode-char)

    :config
    (general-def
      :keymaps 'helpful-mode-map
      "SPC" nil
      "n" nil
      "p" nil
      "g" nil
      "g r" 'helpful-update
      "q" 'quit-window)
    (evil-make-overriding-map helpful-mode-map 'normal)

    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))
#+END_SRC

*** TODO think at point in org-mode src environment

** ediff

#+begin_src emacs-lisp
  (use-package ediff
      :defer t
      :after (winner outline)
      :init
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      (setq ediff-split-window-function 'split-window-horizontally)
      (setq ediff-merge-split-window-function 'split-window-horizontally)
      :config
      ;; show org ediffs unfolded
      (add-hook 'ediff-prepare-buffer-hook #'outline-show-all)
      ;; restore window layout when done
      (add-hook 'ediff-quit-hook #'winner-undo))
#+end_src

*** TODO look at linediff
    https://github.com/rgrinberg/evil-quick-diff
    
* Programming languages
** Lisp
Use common-lips indent function because elisp is not nice with keywords

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'emacs-lisp-mode-hook
  ;;           (lambda () (setq-local lisp-indent-function #'common-lisp-indent-function)))
#+END_SRC

*** TODO Common Lisp
    https://common-lisp.net/project/slime/

*** TODO Closure
    https://cider.mx/

** C/C++
https://github.com/realgud/realgud
https://github.com/tuhdo/semantic-refactor

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 8)

  (use-package cc-mode
    :general
    (my-menu-def
      "F o" 'ff-get-other-file
      "F O" '(lambda () (interactive) (ff-get-other-file t)))
    :local
    (c-mode-common-hook . ((setq-local tab-width 8)))
    (java-mode-hook . ((setq-local tab-width 4)
                       (setq-local c-basic-offset 4))))

  (use-package ccls
    :after projectile
    ;; :ensure-system-package ccls
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    :init
    (setq projectile-project-root-files-top-down-recurring
      (append '("compile_commands.json" ".ccls")
          projectile-project-root-files-top-down-recurring))
    :config
    (setq lsp-prefer-flymake nil)
    (push ".ccls-cache" projectile-globally-ignored-directories)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))

  (use-package realgud
    :defer
    :after (cc-mode))

  (use-package glsl-mode
    :defer
    :mode ("\\.glsm\\'" "\\.vert\\'" "\\.frag\\'" "\\.geom\\'")
    )

  (use-package company-c-headers
    :after (cc-mode)
    :config
    (add-to-list 'company-backends 'company-c-headers)
    ;; (setq company-c-headers-path-system "" )
    )

#+END_SRC

** Python

#+begin_src emacs-lisp
  (use-package python
    :mode
    ("SConstruct" . python-mode)
    ("SConscript" . python-mode))
#+end_src

** Haskell
*** Intero
https://commercialhaskell.github.io/intero/

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :config
    (general-def
      :keymaps 'haskell-mode-map
      "C-c C-c" 'haskell-compile)
    )

  (use-package intero
    :hook (haskell-mode . intero-mode)
    )


  ;; (use-package haskell-process
  ;;   :after haskell-mode)

  ;; (use-package haskell-interactive-mode
  ;;   :after haskell-mode
  ;;   :contig (add-hook 'haskell-mode-hook 'interactive-haskell-mode))


#+END_SRC

*** Dante
https://github.com/jyp/dante

fork of intero

** TODO Pdf/Latex
*** AUCTeX
https://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :straight auctex
    :custom
    (TeX-parse-self t)
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-complete-expert-commands t)
    (TeX-debug-bad-boxes t)
    (TeX-debug-warnings t)
    (TeX-electric-escape nil)
    (TeX-electric-math nil)
    (TeX-electric-sub-and-superscript t)
    (LaTeX-electric-left-right-brace t)
    (TeX-master 'dwim)
    ;; (TeX-PDF-mode t)
    ;; (TeX-source-correlate-mode t)
    ;; (TeX-source-correlate-start-server t)
    (LaTeX-default-style "scrartcl")
    (LaTeX-default-options '("version=last" "paper=A4" "parskip=half"))
    (TeX-auto-untabify t)
    :config
    (set-fill-column 80) ;;TODO do this in hook
    ;; KEYMAPS
    ;; (general-define-key :keymaps 'TeX-error-overview-mode-map
    ;;   "j" 'TeX-error-overview-next-error
    ;;   "k" 'TeX-error-overview-previous-error
    ;;   "h" nil
    ;;   "l" nil
    ;;   "q" 'TeX-error-overview-quit)
    ;; (evil-make-overriding-map TeX-error-overview-mode-map 'normal)
    ;; HOOKS
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook #'flyspell-mode)
    (add-hook 'LaTeX-mode-hook #'reftex-mode)
    (add-hook 'LaTeX-mode-hook #'auto-fill-mode)
    (add-hook 'LaTeX-mode-hook #'visual-line-mode))

  (use-package auctex-latexmk
    :after tex
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))
#+END_SRC

*** latex-preview-pane

#+begin_src emacs-lisp
  (use-package latex-preview-pane
    :after tex
    :config
    (latex-preview-pane-enable))

  ;; Embed prewie images
  ;; (use-package preview
  ;;   :custom
  ;;   (preview-auto-cache-preamble t)
  ;;   (preview-preserve-counters t)
  ;;   (preview-preseve-indentation t))
#+END_SRC

*** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    ;; manually update
    ;; :pin manual
    ;; :general (:keymaps pdf-view-mode-map
    ;;		     "C-s" 'isearch-forward)
    :defer 15
    :config
    (pdf-tools-install t)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
    (setq TeX-view-program-list '(("pdf-tools" TeX-pdf-tools-sync-view))))
#+end_src

** Rust
   https://github.com/brotzeit/rustic
   rustic focuses on integration to many emacs packages and rust-mode wants to
   be light weight.

#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :mode "\\.rs\\'"
    :config
    (push "target" projectile-globally-ignored-directories))
#+END_SRC

** JS

#+begin_src emacs-lisp
  (use-package web-mode)
#+end_src

** Elm

#+begin_src emacs-lisp
  (use-package elm-mode
    :mode ("\\.elm\\'")
    :config
    (add-to-list 'company-backends 'company-elm)
    (push "elm-stuff" projectile-globally-ignored-directories))
#+end_src

** R

#+begin_src emacs-lisp
  (use-package ess)
#+end_src

** Sonic Pi

#+begin_src emacs-lisp
  (use-package sonic-pi
    :config
    (setq sonic-pi-path "/usr/lib/sonic-pi/"))
#+end_src

** GDScript

#+begin_src emacs-lisp
  (use-package gdscript-mode
    :straight (gdscript-mode
	       :type git :host github :repo "GDQuest/emacs-gdscript-mode"
	       :files ("*.el" "data/*.txt"))

    :config
    (setq gdscript-tabs-mode t) ;; If true, use tabs for indents. Default: t
    (setq gdscript-tab-width 4) ;; Controls the width of tab-based indents
    )
#+end_src

** Markup & Config Langs
*** yaml

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'"))
#+end_src

*** toml

#+begin_src emacs-lisp
  (use-package toml-mode
    :mode ("\\.toml\\'"))
#+end_src

*** markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))
#+end_src

*** systemd

#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

*** nginx

#+begin_src emacs-lisp
  (use-package nginx-mode
    :init
    (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode)))
#+end_src

*** PKGBUILD

Recognize arch linux pgkbuild files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+END_SRC

*** dot

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
#+end_src

** PlantUML

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config
    (setq plantuml-jar-path (expand-file-name "plantuml.jar" user-emacs-directory))
    (setq plantuml-default-exec-mode 'jar))
#+end_src

* Settings
** indent

#+BEGIN_SRC emacs-lisp
  (setq tab-width 4)
  (use-package clean-aindent-mode
    :config (setq clean-aindent-is-simple-indent t))
#+END_SRC

** TODO whitespace
** TODO show-parens
** yes-no

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** vc symlinks
Always follow symlinks to vc controlled sources.
This happens a lot because my dotfiles are linked by stow.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

* Functions

** current-file
#+BEGIN_SRC emacs-lisp
  (defun rename-current-file ()
    "Renames both current buffer and the file it's visiting."
    (interactive)
    (unless (buffer-file-name)
      (error "Buffer '%s' is not visiting a file!" (buffer-name)))
    (let ((new-file-name (read-file-name "Rename current file to: "
					 (file-name-directory buffer-file-name))))
      (rename-file buffer-file-name new-file-name)
      (rename-buffer new-file-name)
      (set-visited-file-name new-file-name)
      (set-buffer-modified-p nil)
      (setq-local default-directory (file-name-directory new-file-name))
      (message "Current file renamed to %s." new-file-name)))

  (defun delete-current-file ()
    "Deletes the current buffer and the file it's visiting."
    (interactive)
    (unless (buffer-file-name)
      (error "Buffer '%s' is not visiting a file!" (buffer-name)))
    (delete-file buffer-file-name)
    (kill-buffer))
#+END_SRC

** macro execute
#+BEGIN_SRC emacs-lisp
  ;; alternative command version
  (defun maschm/q ()
    "Apply macro in q register on selected lines."
    (interactive)
    (if (evil-visual-state-p)
        (evil-ex-normal (region-beginning) (region-end) "@q")
      (evil-execute-macro 1 (evil-get-register ?q))))

  (general-define-key
   :states '(normal)
   "Q" 'maschm/q)
#+END_SRC

** dir-local reload
#+BEGIN_SRC emacs-lisp
  (defun reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))
#+END_SRC
