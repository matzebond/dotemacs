#+TITLE: Emacs configuration file
#+AUTHOR: Matthias Schmitt
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle yes :comments link

This is my emacs configuration file in literate style as an org mode file.

* Preface

#+BEGIN_SRC emacs-lisp :shebang ";; -*- lexical-binding: t; -*-"
#+END_SRC

** Tangle

Automatically reload the configuration after changes to the =init.org= file.

#+BEGIN_SRC emacs-lisp
  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
  tangled, and the tangled file is compiled."
    (interactive)
    (when (equal (buffer-file-name)
                 (expand-file-name "init.org" user-emacs-directory))
      (let ((prog-mode-hook nil)) ;; Avoid running hooks when tangling.
        (org-babel-tangle)
        ;; (byte-compile-file (expand-file-name "init.el" user-emacs-directory))
        )))

  (add-hook 'after-save-hook 'tangle-init)
#+END_SRC

*** TODO why are there use-package errors when using byte-compile-file
* Initial Stuff
** Start up
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC

** Init Time

#+begin_src emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

** Garbage Collection

In =early-init.el= `gc-cons-threshold' is set to a high value
this should improve startup time by reducing the number of GC runs.
After startup reset it to reasonable value

#+BEGIN_SRC emacs-lisp
  ;; (message (format "%s - %s" gc-cons-threshold gc-cons-percentage))
  (setq garbage-collection-messages t)

  (add-hook 'focus-out-hook 'garbage-collect)
#+END_SRC

** Package management & straight.el

Bootstrap straight.el

#+BEGIN_SRC emacs-lisp
  (setq straight-recipes-gnu-elpa-use-mirror t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

Use ~straight.el~ together with ~use-package~

Package `use-package' provides a handy macro by the same name which
is essentially a wrapper around `with-eval-after-load' with a lot
of handy syntactic sugar and useful features.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (straight-use-package 'use-package))

  ;; Tell `use-package' to always load features lazily unless told
  ;; otherwise. It's nicer to have this kind of thing be deterministic:
  ;; if `:demand' is present, the loading is eager; otherwise, the
  ;; loading is lazy. See
  ;; https://github.com/jwiegley/use-package#notes-about-lazy-loading.
  (setq use-package-always-defer t)

  ;; When configuring a feature with `use-package', also tell
  ;; straight.el to install a package of the same name, unless otherwise
  ;; specified using the `:straight' keyword.
  (setq straight-use-package-by-default t)

  ;; (setq use-package-compute-statistics t)
  (setq use-package-verbose t)
#+END_SRC

** Custom

Don't clobber the init.el file
use a own file for emacs custom definition

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

** Basic packages
*** diminish

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand)
#+END_SRC

*** general

#+BEGIN_SRC emacs-lisp
  (use-package general
    :demand
    :config
    (general-evil-setup t)

    (defconst my-menu-key "SPC")
    (defconst my-non-normal-menu-key "M-SPC")
    (general-create-definer my-menu-def
      :keymaps 'override
      :states '(motion insert emacs)
      :prefix my-menu-key
      :non-normal-prefix my-non-normal-menu-key)
    (my-menu-def
      "?" '(general-describe-keybindings :which-key "show bindings"))
    (general-def
      :keymaps 'global
      my-non-normal-menu-key nil)

    (defconst my-leader-key ",")
    (defconst my-non-normal-leader-key "M-,")
    (general-create-definer my-leader-def
      ;; :keymaps 'local
      :states '(motion insert)
      :prefix my-leader-key
      :non-normal-prefix my-non-normal-leader-key)
    (general-mmap
      "," nil ;evil-repeat-find-char-reverse
      ))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :demand
    :general
    (my-menu-def
      "H K" 'which-key-show-keymap
      "H T" 'which-key-show-top-level)
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC

*** epkg

#+BEGIN_SRC emacs-lisp
  (use-package epkg
    :defer t
    ;; on func epkg-list-packages)
    )
#+END_SRC

*** bug hunter

#+begin_src emacs-lisp
  (use-package bug-hunter
    :defer 30)
#+end_src

*** exec-path-from-shell
https://github.com/purcell/exec-path-from-shell

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (daemonp)
    :demand
    :config
    (add-to-list 'exec-path-from-shell-variables '"MOZ_ENABLE_WAYLAND")
    (add-to-list 'exec-path-from-shell-variables '"QT_QPA_PLATFORM")
    (exec-path-from-shell-initialize))
#+end_src

* Saving
** Backup

#+BEGIN_SRC emacs-lisp
  (defvar user-backup-directory (expand-file-name ".cache/backups" user-emacs-directory))
  (make-directory user-backup-directory 'noerror)
  (setq backup-directory-alist `(("." . ,user-backup-directory)))
  (setq make-backup-files t      ; backup of a file the first time it is saved.
        backup-by-copying t      ; don't clobber symlinks
        version-control t        ; version numbers for backup files
        delete-old-versions t    ; delete excess backup files silently
        ;; delete-by-moving-to-tr
        kept-old-versions 6      ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9      ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default t      ; auto-save every buffer that visits a file
        auto-save-timeout 20     ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200   ; number of keystrokes between auto-saves (default: 300)
    )
#+END_SRC

** Undo history

#+BEGIN_SRC emacs-lisp
  (defvar user-undo-directory (expand-file-name ".cache/undo" user-emacs-directory))
  (make-directory user-undo-directory 'noerror)
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist (list (cons "." user-undo-directory)))
#+END_SRC

** File history

#+begin_src emacs-lisp
  (save-place-mode 1) ;; save last cursor position
  (savehist-mode 1) ;; save minibuffer history
#+end_src

*** recentf

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 2048 ;; MRU configs
        recentf-max-saved-items 2048
        recentf-exclude '("recentf" "autoload" "emacs-customizations.el"))
#+end_src

** Lockfile

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

* Navigation & Search
** Buffer & Window menu

#+BEGIN_SRC emacs-lisp
  (my-menu-def
    "<tab>" '(mode-line-other-buffer :which-key "last-buffer")
    "<M-tab>" '((lambda ()
                  (interactive)
                  (switch-to-buffer-other-window (other-buffer)))
                :which-key "last-buffer-other-window")

    "B" '(:ignore t :which-key "Buffer")
    "B m" '((lambda () (interactive) (switch-to-buffer "*Messages*"))
        :which-key "messages")
    "B M" '((lambda () (interactive) (switch-to-buffer-other-window "*Messages*"))
        :which-key "messages-in-other")
    "B s" '((lambda () (interactive) (switch-to-buffer "*scratch*"))
        :which-key "scratch")
    "B S" '((lambda () (interactive) (switch-to-buffer-other-window "*scratch*"))
        :which-key "scratch-in-other")
    "B w" '((lambda () (interactive) (switch-to-buffer "*Warnings*"))
        :which-key "warnings")
    "B W" '((lambda () (interactive) (switch-to-buffer-other-window "*Warnings*"))
        :which-key "warnings-in-other")
    "B d" 'kill-current-buffer
    "B D" 'evil-delete-buffer
    "B r" 'revert-buffer
    "B q" 'quit-window
    "B k" 'bury-buffer

    "d" 'kill-current-buffer
    "k" 'bury-buffer
    "q" 'evil-window-delete

    "x"  (general-simulate-key "C-x")

    "w" 'other-window
    ;; "W"  (general-simulate-key "C-w")
    "W" '(:ignore t :which-key "Window")
    "W d" 'delete-window
    "W o" 'delete-other-windows)
#+end_src

** consult

consult-line -> embark-export to occur-mode buffer -> occur-edit-mode for editing of matches in buffer.
consult-grep -> embark-export to grep-mode buffer -> wgrep for editing of all matches.

#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    :demand
    :general
    (my-menu-def
      "SPC" '(execute-extended-command :which-key "M-x")
      "b" '(consult-buffer :which-key "Buffer")
      "B b" '(consult-buffer :which-key "Buffer")
      "B B" '(consult-buffer-other-window :which-key "Buffer")
      "F b" '(consult-bookmark :which-key "Bookmarks")
      ;; "W p" '(:ignore t :which-key "ivy-view")
      ;; "W pu" 'ivy-push-view
      ;; "W po" 'ivy-pop-view
      ;; "W w" 'ivy-switch-view
      "f" '(:ignore t :which-key "File")
      "f" 'find-file
      "F" '(:ignore t :which-key "File")
      "F t" '((lambda () (interactive) (find-file (read-file-name "Find file(remote): " "/ssh:")))
              :which-key "tramp")
      "F r" '(consult-recent-file :which-key "recent")
      "F f" '(consult-find :which-key "recent")
      "r" '(consult-recent-file :which-key "recent")
      "/" '(consult-ripgrep :which-key "search")
      )

    (my-leader-def
      "p" 'consult-yank-from-kill-ring)

    (general-def
      :keymaps 'global
      :states 'motion
      "C-s" 'consult-line
      "C-x f" 'find-file ;; replace set-fill-colum
      "C-x C-r" 'consult-recent-file)

    (general-def
      :keymaps 'comint-mode-map
      "M-r" 'consult-history
      "C-s" 'consult-history)

    ;; ;; Enable automatic preview at point in the *Completions* buffer.
    ;; ;; This is relevant when you use the default completion UI,
    ;; ;; and not necessary for Vertico, Selectrum, etc.
    ;; :hook (completion-list-mode . consult-preview-at-point-mode)

    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-file consult--source-project-file consult--source-bookmark
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    (setq consult-narrow-key "<")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; Optionally configure a function which returns the project root directory.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (project-roots)
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-root-function #'projectile-project-root)
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-root-function #'vc-root-dir)
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
    :local
    (minibuffer-setup-hook . ((setq completion-in-region-function #'consult-completion-in-region)))
  )
#+end_src

*** custom

Use `consult-line` search as last evil/isearch string copied from [[https://github.com/minad/consult/issues/318][issue]]

#+begin_src emacs-lisp
  (defun maschm/consult-line-evil-history (&rest _)
    "Add latest `consult-line' search pattern to the evil search history ring.
  This only works with orderless and for the first component of the search."
    (when (bound-and-true-p evil-mode)
      (let ((pattern (car (orderless-pattern-compiler (car consult--line-history)))))
        (add-to-history
         'regexp-search-ring
         pattern
         regexp-search-ring-max)
        (when (eq evil-search-module 'isearch)
          (setq isearch-string pattern))
        (when (eq evil-search-module 'evil-search)
          (add-to-history 'evil-ex-search-history pattern)
          (setq evil-ex-search-pattern (list pattern t t))
          (setq evil-ex-search-direction 'forward)
          (when evil-ex-search-persistent-highlight
            (evil-ex-search-activate-highlight evil-ex-search-pattern))))))

  (advice-add #'consult-line :after #'maschm/consult-line-evil-history)
#+end_src

** vertico

#+begin_src emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    :general
    (general-def
      :keymaps 'vertico-map
      "<escape>" #'abort-recursive-edit
      ;; "C-RET" #'vertico-exit-input ;;'minibuffer-force-complete-and-exit
      ;; TODO only for file/path related comands
      "C-l" #'vertico-insert
      "<C-tab>" #'vertico-insert
      ;; "RET" #'vertico-directory-enter
      ;; "DEL" 'vertico-directory-delete-char
      ;; "M-DEL" 'vertico-directory-delete-word
      ;; "C-l" 'vertico-directory-enter
      ;; "C-h" 'vertico-directory-delete-word
      ))

  (use-package vertico-directory
    :straight nil
    :load-path "straight/build/vertico/extensions"
    :general
    (general-def
      :keymaps 'vertico-map
      "RET" #'vertico-directory-enter
      "DEL" 'vertico-directory-delete-char
      "M-DEL" 'vertico-directory-delete-word
      "C-l" 'vertico-directory-enter
      "C-h" 'vertico-directory-delete-word
      )
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))


  (setq enable-recursive-minibuffers t)
  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
#+end_src

** orderless
  Use the `orderless' completion style. Additionally enable `partial-completion'
  for file path expansion. `partial-completion' is important for wildcard
  support. Multiple files can be opened at once with `find-file' if you enter a
  wildcard. You may also give the `initials' completion style a try.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless))
    (setq orderless-component-separator 'orderless-escapable-split-on-space)

    (defun basic-remote-try-completion (string table pred point)
      (and (vertico--remote-p string)
           (completion-basic-try-completion string table pred point)))
    (defun basic-remote-all-completions (string table pred point)
      (and (vertico--remote-p string)
           (completion-basic-all-completions string table pred point)))
    (add-to-list
     'completion-styles-alist
     '(basic-remote basic-remote-try-completion basic-remote-all-completions nil))
    (setq completion-category-overrides
          '((file (styles basic-remote orderless)))))
#+end_src

** marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

** embark

#+begin_src emacs-lisp
  (use-package embark
    :general
    (general-def :keymaps 'global
      "C-." 'embark-act         ;; pick some comfortable binding
      "C-;" 'embark-dwim        ;; good alternative: M-.
      "C-h B" 'embark-bindings  ;; alternative for `describe-bindings'
      )

    (general-def :keymaps '(evil-normal-state-map flyspell-mode-map)
      "C-." nil ;; evil-repeat-pop flyspell-correct-word
      )

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** abo-abo
[[http://oremacs.com/swiper/][ivy & swiper manual]]
*** ivy
    :PROPERTIES:
    :header-args:emacs-lisp: :tangle no
    :END:

‘M-o’      (‘ivy-dispatching-done’)
‘C-M-j’    (‘ivy-immediate-done’)
‘M-j’      (‘ivy-yank-word’)
‘C-r’      (‘ivy-reverse-i-search’)
‘M-w’      (‘ivy-kill-ring-save’)
‘C-c C-o’  (‘ivy-occur’)
‘M-r’      (‘ivy-toggle-regexp-quote’)
‘~~’       (local home directory)

#+begin_src emacs-lisp
  (use-package ivy
    :demand
    :diminish ivy-mode
    :general
    (my-menu-def
      "b" '(ivy-switch-buffer :which-key "Buffer")
      "W p" '(:ignore t :which-key "ivy-view")
      "W pu" 'ivy-push-view
      "W po" 'ivy-pop-view
      "W w" 'ivy-switch-view)

    (general-def
      :keymaps 'ivy-minibuffer-map
      "C-l" 'ivy-alt-done
      "C-h" 'ivy-backward-delete-char
      ;; "ESC" 'minibuffer-keyboard-quit
      "<escape>" 'minibuffer-keyboard-quit
      "C-RET" 'ivy-immediate-done
      "<C-return>" 'ivy-immediate-done
      "C-SPC" 'nil
      "C-TAB" 'ivy-insert-current
      "<C-tab>" 'ivy-insert-current
      "<M-o>" 'ivy-dispatching-done ;; TODO why does this not work?
      "<M-return>" 'ivy-dispatching-done)

    (general-def
      :keymaps 'ivy-occur-grep-mode-map
      "SPC" nil)

    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    (setq ivy-extra-directories nil)
    (setq ivy-wrap t)

    (defun maschm/ivy-append-action (x)
      (with-ivy-window
        (progn
          (evil-append 0)
          (insert x)
          (evil-normal-state))))

    (ivy-set-actions
     t '(("i" #[257 "\211;\203	\0\211\202\0\211@c\207" [] 2 "\n\n(fn X)"] "insert")
         ("w" #[257 "\300;\203\n\0\202\f\0@!\207" [kill-new] 3 "\n\n(fn X)"] "copy")
         ("a" maschm/ivy-append-action "append"))))

  (use-package ivy-hydra
    :defer 15
    :after (ivy hydra)
    :commands (hydra-ivy/body))

  (use-package prescient
    :demand
    :after ivy
    :config (setq prescient-filter-method 'literal+initialism))

  (use-package ivy-prescient
    :demand
    :after (prescient ivy)
    :config (ivy-prescient-mode t))

  (use-package ivy-rich
    :demand
    :after (ivy counsel)
    :config
    (ivy-rich-mode 1)
    (setq ivy-rich-parse-remote-buffer nil))
#+end_src

**** TODO fix ivy-occur
dired keymap is set to overriding and no ivy-occur cmd can be used

*** counsel
    :PROPERTIES:
    :header-args:emacs-lisp: :tangle no
    :END:

#+begin_src emacs-lisp
  (use-package counsel
    :demand
    :diminish counsel-mode
    :general
    (my-menu-def
      "f" '(:ignore t :which-key "File")
      "f" 'counsel-find-file
      "F" '(:ignore t :which-key "File")
      "F r" '(counsel-recentf :which-key "recent")
      "r" '(counsel-recentf :which-key "recent")
      "SPC" '(counsel-M-x :which-key "M-x"))
    (general-def
      :keymaps 'global
      "C-x f" 'counsel-find-file ;; replace set-fill-colum
      "C-x C-r" 'counsel-recentf)
    :config
    (counsel-mode)
    (custom-reevaluate-setting 'ivy-initial-inputs-alist)

    (defun maschm/counsel-helpful-action (x)
      (helpful-symbol (intern x)))

    (ivy-set-actions
     'counsel-M-x '(("d" counsel--find-symbol "definition")
                    ("h" maschm/counsel-helpful-action "help"))))

  (use-package counsel-tramp
    :defer 15
    :after counsel
    :general
    (my-menu-def
      "F t" 'counsel-tramp)
    :config
    (setq tramp-default-method "ssh"))
#+end_src

get back to the local file system when in find-file while using tramp
use =/ C-j= or =~ //= to get to the local / directory

*** swiper
    :PROPERTIES:
    :header-args:emacs-lisp: :tangle no
    :END:

#+begin_src emacs-lisp
  (use-package swiper
    :defer 15
    :general
    (general-def
      :keymaps 'global
      :states 'motion
      "C-s" 'maschm/evil-swiper))

  (defun maschm/evil-swiper ()
    (interactive)
    (if (region-active-p)
      (swiper (buffer-substring (region-beginning) (region-end)))
      (swiper)))
#+end_src

*** avy

#+begin_src emacs-lisp
  (use-package avy
    :defer 15
    :commands (avy-goto-char-2 avy-goto-char-timer avy-goto-line)
    :general
    (general-def
      :states 'motion
      "g O" 'avy-goto-char-2
      "g o" 'avy-goto-char-timer))
#+end_src

*** hydra

#+begin_src emacs-lisp
  (use-package hydra
    :defer 15)
#+end_src

** winner
   undo and redo for window operations

#+begin_src emacs-lisp
  (use-package winner
    :demand
    :general
    (my-menu-def
      "W u" 'winner-undo
      "W r" 'winner-redo)
    :config (winner-mode 1))
#+end_src

** link-hint

#+BEGIN_SRC emacs-lisp
  (use-package link-hint
    :after avy
    :general
    (my-menu-def
      "l" '(link-hint-open-link :which-key "link-hint")))
#+END_SRC

** Symbol

#+begin_src emacs-lisp
  (use-package symbol-overlay
    :defer 15
    :general
    (my-menu-def
      "s" '(:ignore t :which-key "Symbol")
      "s" (general-key-dispatch 'symbol-overlay-put
            :timeout .33
            "n" 'symbol-overlay-jump-next
            "p" 'symbol-overlay-jump-prev
            "d" 'symbol-overlay-remove-all
            "r" 'symbol-overlay-rename)

      "S" '(:ignore t :which-key "Symbol")
      "S s" 'symbol-overlay-mode
      "S n" 'symbol-overlay-jump-next
      "S p" 'symbol-overlay-jump-prev
      "S d" 'symbol-overlay-remove-all
      "S r" 'symbol-overlay-rename))
#+end_src
*** TODO symbol-overlay hydra
    Or use swiper to got to symbol?
** projectile

TODO [[https://github.com/technomancy/find-file-in-project][find-file-in-project]] vs projectile

#+BEGIN_SRC emacs-lisp

  (use-package projectile
    :diminish (projectile-mode)
    :general
    (my-menu-def
      "p" 'projectile-find-file
      "P" '(:ignore t :which-key "Project")
      "P p" 'projectile-switch-project
      "P c" 'projectile-compile-project
      "P r" 'projectile-run-project
      "P t" 'projectile-test-project)
    :custom
    (projectile-indexing-method 'native)
    :config
    (projectile-mode +1)
    ;; (setq projectile-completion-system 'ivy)
    (setq projectile-generic-command "fd -H --ignore-file .projectile -t f -0")
    ;; (setq projectile-indexing-method 'turbo-alien)
    (setq projectile-project-search-path '("~/proj/")))

  (use-package counsel-projectile
    :after (counsel projectile)
    :general
    (my-menu-def
      "p" 'counsel-projectile
      "P p" 'counsel-projectile-switch-project
      "P f" 'counsel-projectile-find-file
      "P b" 'counsel-projectile-switch-to-buffer
      "P /" '(counsel-projectile-rg :which-key "search proj")
      "/" '(counsel-projectile-rg :which-key "search proj"))
    :config
    (counsel-projectile-mode)
    (setq counsel-projectile-rg-initial-input
          '(when (evil-visual-state-p)
             (buffer-substring-no-properties
              (evil-range-beginning (evil-visual-range))
              (evil-range-end (evil-visual-range))))))
#+END_SRC

** wgrep

#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :defer 5)
#+END_SRC

** deadgrep

#+begin_src emacs-lisp
(use-package deadgrep)
#+end_src

** TODO pair programming
   https://github.com/tjim/lockstep
* Evil
** undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :demand
    :diminish undo-tree-mode
    :general
    (general-def
      :states 'normal
      "U" 'undo-tree-visualize)
    :custom
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t)
    :config
    (general-def
      :keymaps 'undo-tree-visualizer-mode-map
      "k" 'undo-tree-visualize-undo
      "j" 'undo-tree-visualize-redo)
    (global-undo-tree-mode +1))
#+end_src

** evil-mode
https://github.com/emacs-evil/evil-collection

https://github.com/noctuid/evil-guide

#+begin_src emacs-lisp
  (use-package evil
    :demand
    :init
    (setq evil-want-C-w-delete nil)
    (setq evil-want-C-w-in-emacs-state t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-Y-yank-to-eol t)
    :custom
    (evil-undo-system 'undo-tree)
    :config
    (evil-mode 1)
    (cl-loop for (mode . state) in
             '((term-mode . emacs)
               (compilation-mode . motion))
             do (evil-set-initial-state mode state))
    (evil-set-command-property 'evil-yank :move-point t)
    (setq evil-echo-state nil)
    (setq evil-ex-substitute-global t)
    (setq evil-vsplit-window-right t)

    (general-mmap
      "SPC" nil
      "RET" nil
      "TAB" 'evil-jump-forward  ; "TAB" is "C-i" which is the tab-key in terminal mode
                                ; use "<tab>" to bind to only the tab-key in gui mode
      )
    (general-imap
      "C-a" nil
      "C-e" nil ; evil-copy-from-below
      )
    )
#+END_SRC

** Vim goodies
*** visual line

#+begin_src emacs-lisp
  (general-mmap
    "j" 'evil-next-visual-line
    "k" 'evil-previous-visual-line)
  (general-mmap
    "gj" 'evil-next-line
    "gk" 'evil-previous-line)
#+end_src

*** Folding

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'hs-minor-mode)
#+END_SRC

*** center search result
Equivalent of ~nnoremap n nzz~

#+BEGIN_SRC emacs-lisp
  (defun my-center-line (&rest _)
    (evil-scroll-line-to-center nil))

  (advice-add 'evil-search-next :after #'my-center-line)
#+END_SRC

*** continuous shifting
Use < in visual mode to continuously shift selection

#+begin_src emacs-lisp
  (defun maschm/visual-restore-after-shift (&rest _)
    "Restore visual selection."
    (if (evil-visual-state-p)
    (progn
      (evil-normal-state)
      (evil-visual-restore))))

  (advice-add 'evil-shift-right :after #'maschm/visual-restore-after-shift)
  ;; (advice-remove 'evil-shift-right #'maschm/visual-restore-after-shift)
#+end_src

** Evil packages

#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :general
    (general-nmap
      "gc" 'evil-commentary
      "gy" 'evil-commentary-yank)
    (general-def
      :keymaps 'evil-outer-text-objects-map
      "u" 'evil-commentary/a-comment-block))

  (use-package evil-surround
    :general
    (general-def
      :states 'operator
      "s" 'evil-surround-edit
      "S" 'evil-Surround-edit)
    (general-vmap
      "S" 'evil-surround-region
      "gS" 'evil-Surround-region))

  (use-package evil-numbers
    :demand)

  (use-package evil-matchit
    :demand
    :config (global-evil-matchit-mode 1))

  (use-package smartparens
    :demand)

  (use-package evil-smartparens
    :demand
    :after (evil smartparens)
    :config (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))

  (use-package evil-mc
    :demand
    :diminish emc
    :config
    ;; (global-evil-mc-mode 1)
    ;; (add-hook 'magit-mode-hook #'evil-mc-mode -1)
    (advice-add 'evil-mc-define-vars :after
                (lambda ()
                  (add-to-list 'evil-mc-incompatible-minor-modes 'auto-fill-mode))))

  (use-package evil-visualstar
    :demand
    :config (global-evil-visualstar-mode))

  (use-package evil-lion
    :general
    (general-def
      :keymaps 'normal
      "g l" 'evil-lion-left
      "g L" 'evil-lion-right))

  (use-package evil-exchange
    :config
    (evil-exchange-install))

  (use-package evil-args
    :general
    (:keymaps 'evil-inner-text-objects-map "a" 'evil-inner-arg)
    (:keymaps 'evil-outer-text-objects-map "a" 'evil-outer-arg))
#+END_SRC

* Org
** org-mode

#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight
    `(org-plus-contrib
      :type git
      :repo "https://code.orgmode.org/bzg/org-mode.git"
      :local-repo "org"
      :depth full
      :pre-build
      ,(list (concat (when (eq system-type 'berkeley-unix) "g") "make")
             "autoloads"
             "EMACS=emacs") ;; (concat "EMACS=" invocation-directory invocation-name)
      :build (:not autoloads)
      :files (:defaults "lisp/*.el" ("etc/styles/" "etc/styles/*") "contrib/lisp/*.el")
      :includes org)
    :defer 10
    :general
    (my-menu-def
      "o" '(:ignore t :which-key "org-outline")
      "o" (general-key-dispatch 'consult-outline
            :timeout .33
            "a" 'org-agenda
            "c" 'org-capture)

      "O" '(:ignore t :which-key "org")
      "O a" 'org-agenda
      "O c" 'org-capture
      "O l" 'org-insert-link
      "O L" 'org-store-link
      "O T" '(org-timer-set-timer :which-key "timer"))

    (general-def
      :keymaps 'global
      "C-c c" 'org-capture
      "C-c a" 'org-agenda
      "C-c l" 'org-store-link)

    :config
    (my-leader-def
      :keymaps 'org-mode-map
      "n" '(:ignore t :which-key "org narrow")
      "ns" 'org-narrow-to-subtree
      "nb" 'org-narrow-to-block
      "ne" 'org-narrow-to-element
      "nn" 'org-toggle-narrow-to-subtree
      "s" 'org-sparse-tree
      "t" 'org-insert-structure-template
      "T" '(:ignore t :which-key "toogle")
      "Tp" 'org-toggle-pretty-entities
      "Ti" 'org-toggle-inline-images
      "Tl" 'org-latex-preview
      "l" 'org-latex-preview
      "," 'org-edit-special)

    (general-def
      :keymaps 'org-src-mode-map
      :states 'insert
      "," 'self-insert-command)

    (my-leader-def
      :keymaps 'org-src-mode-map
      ;; evil state mode bindings are only active after the first mode change
      :states nil
      "," 'org-edit-src-exit)

    (setq org-directory "~/org/")
    (setq org-return-follows-link t)
    (setq org-startup-folded t)
    (setq org-pretty-entities t)
    (setq org-image-actual-width 300)
    (setq org-export-with-smart-quotes t)
    (setq org-hide-emphasis-markers t)
    (setq org-cite-global-bibliography '("~/zotero.bib"))

    (setq org-default-notes-file (expand-file-name "inbox.org" org-directory))
    (setq org-agenda-files '("~/org/inbox.org"
                             "~/org/gtd.org"
                             "~/org/tickler.org"))
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
    (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                   (file+headline "~/org/inbox.org" "Tasks")
                                   "* TODO %i%?")
                                  ("m" "Mail Todo [inbox]" entry
                                   (file+headline "~/org/inbox.org" "Tasks")
                                   "* TODO %i%?\n%a\n")
                                  ("T" "Tickler" entry
                                   (file+headline "~/org/tickler.org" "Tickler")
                                   "* %i%? \n %U")))
    (setq org-refile-targets '(("~/org/gtd.org" :maxlevel . 3)
                               ("~/org/someday.org" :level . 1)
                               ("~/org/tickler.org" :maxlevel . 2)))
    (setq org-tag-alist '(("@home" . ?h) ("@uni" . ?u) ("@work" . ?w)))
    (setq org-refile-use-outline-path 'file)
    (setq org-outline-path-complete-in-steps nil)
    (require 'oc-biblatex)
    (setq org-cite-export-processors
          '((latex biblatex)
            (t basic)))

    (add-to-list 'org-structure-template-alist '("se" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("sp" . "src python"))
    (add-to-list 'org-structure-template-alist '("sr" . "src R"))
    (add-to-list 'org-structure-template-alist '("sj" . "src julia"))
    (add-to-list 'org-structure-template-alist '("sl" . "src latex"))
    (add-to-list 'org-structure-template-alist '("ss" . "src sh"))
    (add-to-list 'org-structure-template-alist '("sg" . "src gnuplot"))
    (add-to-list 'org-structure-template-alist '("su" . "src plantuml"))
    (add-to-list 'org-structure-template-alist '("sd" . "src dot"))
    (add-to-list 'org-structure-template-alist '("sy" . "src jupyter-python"))

    ;; (require 'org-tempo)
    ;;(add-to-list 'org-tempo-keywords-alist '("B" . "beamer"))

    (setq org-entities-user
          '(("C" "\\mathbb{C}" t "C" "[C]" "[C]" "ℂ")
            ("E" "\\mathbb{E}" t "E" "[E]" "[E]" "𝔼")
            ("F" "\\mathbb{F}" t "F" "[F]" "[F]" "𝔽")
            ("H" "\\mathbb{H}" t "H" "[H]" "[H]" "ℍ")
            ("I" "\\mathbb{I}" t "I" "[I]" "[I]" "𝕀")
            ("N" "\\mathbb{N}" t "N" "[N]" "[N]" "ℕ")
            ("P" "\\mathbb{P}" t "P" "[P]" "[P]" "ℙ")
            ("Q" "\\mathbb{Q}" t "Q" "[Q]" "[Q]" "ℚ")
            ("R" "\\mathbb{R}" t "R" "[R]" "[R]" "ℝ")
            ("U" "\\mathbb{U}" t "U" "[U]" "[U]" "𝕌")
            ("Z" "\\mathbb{Z}" t "Z" "[Z]" "[Z]" "ℤ")
            ("sqrt" "\\sqrt{\\,}" t "&radic;" "[square root]" "[square root]" "√")
            ("mapsto" "\\mapsto" t "&rarr;" "->" "->" "↦")
            ("etal" "et~al.~" nil "et al." "et al." "et al." "et al.")
            ("eg" "e.g.,\\ " nil "e.g.," "e.g.," "e.g.," "e.g.,")
            ("ie" "i.e.,\\ " nil "i.e.," "i.e.," "i.e.," "i.e.,")))
    )

  (use-package org-contrib
    :after org
    :straight (:type git :repo "https://git.sr.ht/~bzg/org-contrib")
    :demand
    :config
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))


  (use-package evil-org
    :after (evil org)
    :hook (org-mode . evil-org-mode)
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)
    :local
    (evil-org-set-key-theme))

  (use-package htmlize
    :after (org)
    :defer 20)
#+END_SRC

** org babel

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (setq org-ditaa-jar-path (expand-file-name
                              "straight/repos/org/contrib/scripts/ditaa.jar"
                              user-emacs-directory))
    (setq org-plantuml-jar-path (expand-file-name "plantuml.jar" user-emacs-directory))

    ;;(require 'gnuplot)
    (add-to-list 'org-babel-load-languages '(shell . t))
    (add-to-list 'org-babel-load-languages '(python . t))
    (add-to-list 'org-babel-load-languages '(R . t))
    (add-to-list 'org-babel-load-languages '(latex . t))
    (add-to-list 'org-babel-load-languages '(ditaa . t))
    (add-to-list 'org-babel-load-languages '(dot . t))
    (add-to-list 'org-babel-load-languages '(gnuplot . t))
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (add-to-list 'org-babel-load-languages '(plantuml . t))


    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages))


  (use-package ob-async
    :after ob
    :config
    (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia")))
#+end_src

** org export

#+begin_src emacs-lisp
  ;; (use-package ox-latex
  ;;   :defer
  ;;   :config


  (with-eval-after-load 'ox-latex
    ;; TODO might be less flexible to just use latexmk org-latex-compiler is ignored
    (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf -outdir=%o %f"))
    (setq org-latex-caption-above nil)
    (setq org-latex-prefer-user-labels t)
    (add-to-list 'org-latex-packages-alist '("" "tikz" t))
    ;; Danger this will need to be updates if upstream changes this variable
    (setq org-latex-default-packages-alist
          '(("AUTO" "inputenc" t ("pdflatex"))
            ("T1" "fontenc" t ("pdflatex"))
            ("" "graphicx" t)
            ("" "grffile" t)
            ("" "longtable" nil)
            ("" "wrapfig" nil)
            ("" "rotating" nil)
            ("normalem" "ulem" t)
            ("" "amsmath" t)
            ("" "textcomp" t)
            ("" "amssymb" t)
            ("" "capt-of" nil)
            ;; ("" "titletoc" nil) ;; disable for beamer
            ("" "hyperref" nil)))


    (setq org-format-latex-options (plist-put org-format-latex-options ':scale 2.0))

    ;; (setq org-preview-latex-default-process)

    (add-to-list 'org-latex-classes
                 '("ieee"
                   "\\documentclass[11pt]{IEEEtran}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                 '("thesis"
                   "\\documentclass[12pt,a4paper,twoside]{book}"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (require 'ox-beamer)
    (setq org-beamer-frame-default-options "")
    (add-to-list 'org-latex-classes
                 '("sdqbeamer" "\\documentclass[presentation]{sdqbeamer}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

** org capture
   https://github.com/abo-abo/orca
   https://orgmode.org/worg/org-contrib/org-protocol.html

** org-special-block

#+begin_src emacs-lisp
  (use-package org-special-block-extras
    :ensure t
    :hook (org-mode . org-special-block-extras-mode)
    ;; :custom
    ;; (org-special-block-extras--docs-libraries
    ;;  '("~/org-special-block-extras/documentation.org")
    ;;  "The places where I keep my ‘#+documentation’")
    ;; (org-special-block-extras-fancy-links
    ;; nil "Disable this feature.")
    :config
    ;; (org-special-block-extras-short-names)
    )
#+end_src

** TODO org-ref & bibtex

#+begin_src emacs-lisp
  (use-package bibtex-completion
    :defer 20
    :config
    (setq bibtex-completion-bibliography '("~/zotero.bib"))
    ;; (setq bibtex-completion-additionalsearch-fields '(doi url))
    (setq bibtex-completion-pdf-field "File")
    (setq bibtex-completion-notes-path "~/org/notes/")

    (setq bibtex-completion-notes-template-multiple-files
          (concat
           "#+TITLE: ${title}\n"
           "#+ROAM_KEY: cite:${=key=}\n"
           "* TODO Notes\n"
           ":PROPERTIES:\n"
           ":Custom_ID: ${=key=}\n"
           ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
           ":AUTHOR: ${author-abbrev}\n"
           ":JOURNAL: ${journaltitle}\n"
           ":DATE: ${date}\n"
           ":YEAR: ${year}\n"
           ":DOI: ${doi}\n"
           ":URL: ${url}\n"
           ":END:\n\n"
           ))

    (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)
      (let ((bibtex-completion-pdf-open-function
             (lambda (fpath) (start-process "evince" "*helm-bibtex-evince*" "/usr/bin/evince" fpath))))
        (bibtex-completion-open-pdf keys fallback-action)))

    (defun bibtex-completion-format-citation-org-ref-cite (keys)
      "Format ebib references for keys in KEYS."
      (s-join ", "
              (--map (format "cite:%s" it) keys)))

    (add-to-list 'bibtex-completion-format-citation-functions
                 '(org-mode . bibtex-completion-format-citation-org-ref-cite))
    )

  (use-package citar
    :after (embark bibtex-completion)
    ;; :general
    ;; (("C-c b" . citar-insert-citation)
    ;;  :map minibuffer-local-map
    ;;  ("M-b" . citar-insert-preset))
    :custom
    (citar-bibliography '("~/zotero.bib"))
    (org-cite-global-bibliography '("~/zotero.bib"))
    :config
    ;; Make the 'citar' bindings and targets available to `embark'.
    ;; (add-to-list 'embark-target-finders 'bibtex-actions-citation-key-at-point)
    ;; (add-to-list 'embark-keymap-alist '(bibtex . bibtex-actions-map))
    ;; (add-to-list 'embark-keymap-alist '(citation-key . bibtex-actions-buffer-map))

    ;; (file-notify-add-watch
    ;;  (car citar-bibliography) '(change) 'citar-refresh)
    )

  (use-package citar-org
    :disabled
    :no-require
    ;; :general
    ;; (:map org-mode-map
    ;;       ("C-c b" . #'org-cite-insert)) ; Also bound to C-c C-x C-@
    :custom
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar))

  (use-package org-ref
    :disabled
    :after (org)
    :commands (org-ref)
    :init
    (setq org-ref-completion-library 'org-ref-ivy-cite)

    :config
    ;; (require 'ivy-bibtex)
    ;; (org-ref-ivy-cite-completion)
    (setq-default reftex-default-bibliography bibtex-completion-bibliography)
    (setq org-ref-default-bibliography bibtex-completion-bibliography)

    (setq org-ref-default-ref-type "autoref")

    ;; https://github.com/japhir/ArchConfigs/blob/master/myinit.org#org-ref
    (defun maschm/org-ref-open-pdf-at-point ()
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (car (bibtex-completion-find-pdf key))))
        (if (file-exists-p pdf-file)
            (org-open-file pdf-file)
          (message "No PDF found for %s" key))))

    (setq org-ref-open-pdf-function 'maschm/org-ref-open-pdf-at-point)
    (setq org-ref-notes-function 'org-ref-notes-function-many-files)
    (setq org-ref-notes-directory bibtex-completion-notes-path))
#+end_src

** org-download

#+begin_src emacs-lisp
  (use-package org-download
    :after (org)
    :commands (org-download-screenshot org-download-yank org-download-clipboard)
    ;; :general
    ;; (my-leader-def
    ;;   :keymaps 'org-mode-map
    ;;   "I" 'org-download-screenshot
    ;;   "y" 'org-download-yank)
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "./attach")
    (org-download-heading-lvl nil)
    :config
    (org-download-enable)
    (setq org-download-screenshot-method "maim --select --hidecursor --format=png %s"))
#+end_src

** org-reveal

#+begin_src emacs-lisp
  (use-package ox-reveal
    :defer 20
    :config
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))
#+end_src

** org-caldav

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer 15
    :config
    (setq org-caldav-url "https://posteo.de:8443/calendars/male.schmitt"
      org-caldav-calendar-id "default"
      org-caldav-inbox "~/org/cal.org"
      org-caldav-files '("~/org/tickler.org")
      org-caldav-save-directory "~/org"
      org-icalendar-timezone "Europe/Berlin"
      org-caldav-delete-calendar-entries 'ask))
#+END_SRC

** org-brain

#+begin_src emacs-lisp
  (use-package org-brain
    :after (org)
    :defer 15
    :general
    (my-menu-def
      "O b" 'org-brain-goto
      "O v" 'org-brain-visualize)
    :init
    (setq org-brain-path "~/org/brain")
    :config
    (setq org-id-track-globally t)
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
    (setq org-id-locations-file (expand-file-name ".org-id-locations" user-emacs-directory))
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 0))
#+end_src

** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (expand-file-name "~/org/roam/"))
    :general
    (my-menu-def
      "O r" 'org-roam-buffer-toggle
      "O f" 'org-roam-node-find
      "O C" 'org-roam-capture
      "O i" 'org-roam-node-insert)
    (general-def
      :keymaps 'org-roam-mode-map
      [mouse-1] #'org-roam-visit-thing)
    :init
    (setq org-roam-v2-ack t)
    :config
    (my-leader-def
      :states 'normal
      "i" 'org-roam-node-insert)
    ;; :map org-roam-mode-map
    ;; (("C-c n l" . org-roam)
    ;;  ("C-c n f" . org-roam-find-file)
    ;;  ("C-c n j" . org-roam-jump-to-index)
    ;;  ("C-c n b" . org-roam-switch-to-buffer)
    ;;  ("C-c n g" . org-roam-graph))
    ;; :map org-mode-map
    ;; (("C-c n i" . org-roam-insert))

    ;; for org-roam-buffer-toggle
    ;; Recommendation in the official manual
    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-in-direction)
                   (direction . right)
                   (window-width . 0.33)
                   (window-height . fit-window-to-buffer)))

    (org-roam-setup))

  (use-package org-roam-bibtex
    :disabled
    :after (org-roam ivy-bibtex)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (setq orb-preformat-keywords
     '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
          '(("r" "ref" plain (function org-roam-capture--get-point)
             ""
             :file-name "${slug}"
             :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}
  - tags ::
  - keywords :: ${keywords}
  \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")%\n  :NOTER_PAGE: \n  :END:\n\n"
             :unnarrowed t))))
#+end_src

** org-noter

#+begin_src emacs-lisp
  (use-package org-noter
    :after (:any org pdf-view)
    :config
    (setq org-noter-notes-window-location 'other-frame))
#+end_src

** org-sidebar

#+begin_src emacs-lisp
  (use-package org-sidebar
    :after org)
#+end_src

* Git
** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer 30
    :general
    (my-menu-def
      "g" '(:ignore t :which-key "git/vc")
      "g s" 'magit-status
      "g b" 'magit-blame
      "g d" 'magit-diff-buffer-file
      "g l" 'magit-log-buffer-file)
    (general-def
      :keymaps 'magit-mode-map
      "SPC" nil)
    (general-def
      :keymaps 'magit-diff-section-base-map
      [remap magit-visit-thing] 'magit-diff-visit-file-other-window
      ;; "RET" 'magit-diff-visit-file-other-window
      "<M-return>" 'magit-diff-visit-file)
    (general-def
      :keymaps 'magit-diff-mode-map
      "SPC" nil)
    (general-def
      :keymaps 'magit-log-mode-map
      "C-n" 'magit-log-move-to-parent
      "C-p" 'evil-previous-visual-line)
    :custom
    (magit-diff-adjust-tab-width t)
    :config
    (setq magit-diff-refine-hunk t)
    (require 'evil-magit)
    :local
    (git-commit-mode-hook . ((setq-local ispell-local-dictionary "en"))))

  (use-package evil-magit
    :after (evil magit))
#+END_SRC

** Forge

#+BEGIN_SRC emacs-lisp
  (use-package ghub
    :defer 30)

  (use-package forge
    :defer 30
    :after (magit ghub))
#+END_SRC

** Additional

#+BEGIN_SRC emacs-lisp
  (use-package magit-todos
    :after magit)

  (use-package orgit
    :after (org magit))

  (use-package git-gutter-fringe+
    :disabled
    :init (global-git-gutter-fringe+-mode))
#+END_SRC

#+END_SRC

* Mail
** mu4e

#+begin_src emacs-lisp
  (use-package mu4e
    :defer 15
    :general
    (my-menu-def
      "m" '((lambda () (interactive) (let ((default-directory "~/")) (mu4e)))
              :which-key "mail")
      "M" '(:ignore t :which-key "Mail")
      "M u" '(mu4e-update-mail-and-index :which-key "update")
      "M g" '(mu4e-headers-search-bookmark :which-key "bookmarks")
      "M t" '((lambda () (interactive) (mu4e-headers-search (mu4e-get-bookmark-query  ?t)))
              :which-key "today")
      "M w" '((lambda () (interactive) (mu4e-headers-search (mu4e-get-bookmark-query  ?w)))
              :which-key "this week")
      "M U" '((lambda () (interactive) (mu4e-headers-search (mu4e-get-bookmark-query  ?u)))
              :which-key "unread")
      "M j" '(mu4e~headers-jump-to-maildir :which-key "jump")
      "M J" '(mu4e~headers-jump-to-maildir :which-key "jump")
      "M c" '(mu4e-compose-new :which-key "compose")
      "M C" '(mu4e-compose-new :which-key "compose"))
    :config
    (general-def
      :keymaps 'mu4e-main-mode-map
      "/" 'mu4e-headers-search
      "j" nil
      "J" 'mu4e~headers-jump-to-maildir
      "b" 'mu4e-search-bookmark
      "g r" 'mu4e-update-mail-and-index)
    (general-def
      :keymaps 'mu4e-headers-mode-map
      "SPC" nil
      "/" 'mu4e-headers-search
      "j" nil
      "J" 'mu4e~headers-jump-to-maildir
      "g" nil
      "g s" 'mu4e-headers-rerun-search
      "g r" 'mu4e-update-mail-and-index)
    (general-def
      :keymaps 'mu4e-view-mode-map
      "SPC" nil
      "j" nil
      "J" 'mu4e~headers-jump-to-maildir
      "h" nil
      "H" 'mu4e-view-toggle-html
      "g" nil
      "g r" 'mu4e-update-mail-and-index
      "G" nil
      "k" nil ;; mu4e-view-save-url
      "y" nil ;; mu4e-select-other-view
      "v" nil ;; mu4e-view-verify-msg-popup
      "V" nil ;;
      "b" nil ;; mu4e-headers-search-bookmark
      "w" nil ;; visual-line-mode
      "g" nil ;; mu4e-view-go-to-url
      "0" nil
      "z" nil)
    (my-leader-def
      :keymaps 'mu4e-compose-mode-map
      "f" 'mu4e-fill-paragraph)

    (evil-make-overriding-map mu4e-main-mode-map 'normal)
    (evil-set-initial-state 'mu4e-main-mode 'normal)
    (evil-make-overriding-map mu4e-headers-mode-map 'normal)
    (evil-set-initial-state 'mu4e-headers-mode 'normal)
    (evil-make-overriding-map mu4e-view-mode-map 'normal)
    (evil-set-initial-state 'mu4e-view-mode 'normal)
    (setq mu4e-completing-read-function 'completing-read)

    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-maildir "~/.mail")
    (setq mu4e-get-mail-command "mbsync -a")
    (setq quick-get-mail-command "mbsync posteo:INBOX uni:INBOX")
    (setq mu4e-index-cleanup t)        ;; don't do a full cleanup check
    (setq mu4e-index-lazy-check nil)   ;; don't consider up-to-date dirs
    (setq mu4e-change-filenames-when-moving t) ;; needed by mbsync
    (setq mu4e-attachment-dir  "~/dld")

    (setq message-send-mail-function 'smtpmail-send-it)
    (setq smtpmail-debug-info t)

    (setq mu4e-user-mail-address-list '("male.schmitt@posteo.de" "uydvo@student.kit.edu"))
    (setq mu4e-contexts
      `( ,(make-mu4e-context
           :name "posteo"
           :enter-func (lambda () (mu4e-message "Entering posteo context"))
           :leave-func (lambda () (mu4e-message "Leaving posteo context"))
           :match-func (lambda (msg)
                         (when msg
                           (string-match-p "^/posteo" (mu4e-message-field msg :maildir))))
           :vars '((user-mail-address     . "male.schmitt@posteo.de")
                   (user-full-name        . "Matthias Schmitt")
                   (mu4e-sent-folder      . "/posteo/Sent")
                   (mu4e-drafts-folder    . "/posteo/Drafts")
                   (mu4e-trash-folder     . "/posteo/Trash")
                   (mu4e-refile-folder    . "/posteo/Archive")
                   (smtpmail-smtp-server  . "posteo.de")
                   (smtpmail-smtp-service . 465)
                   (smtpmail-stream-type  . ssl)))
         ,(make-mu4e-context
           :name "uni"
           :enter-func (lambda () (mu4e-message "Entering uni context"))
           :leave-func (lambda () (mu4e-message "Leaving uni context"))
           :match-func (lambda (msg)
                         (when msg
                           (string-match-p "^/uni" (mu4e-message-field msg :maildir))))
           :vars '((user-mail-address     . "uydvo@student.kit.edu")
                   (user-full-name        . "Matthias Schmitt")
                   (mu4e-sent-folder      . "/uni/Sent")
                   (mu4e-drafts-folder    . "/uni/Drafts")
                   (mu4e-trash-folder     . "/uni/Trash")
                   (mu4e-refile-folder    . "/uni/Archives")
                   (smtpmail-smtp-server  . "smtp.kit.edu")
                   (smtpmail-smtp-service . 587)
                   (smtpmail-stream-type  . starttls))
       )))
    (setq mu4e-context-policy 'ask-if-none)
    (setq mu4e-compose-context-policy 'ask)
    (setq mu4e-compose-format-flowed t)
    (setq message-kill-buffer-on-exit t)
    (setq mu4e-confirm-quit nil)

    (setq mu4e-headers-time-format "%T") ;; like "%H:%M:%S"
    (setq mu4e-headers-date-format "%F") ;; like "%Y-%m-%d"
    (setq mu4e-headers-skip-duplicates nil)
    (add-hook 'mu4e-compose-mode-hook 'visual-line-mode)
    (add-hook 'mu4e-compose-mode-hook 'visual-fill-column-mode)


    ;; (setq mu4e-maildir-shortcuts
    ;;  '( ("/posteo/Inbox" . ?p)
    ;;     ("/uni/Inbox" . ?u)))

    (setq mu4e-bookmarks
     '((:name  "Unread messages"
          :query "flag:unread AND NOT flag:trashed AND NOT maildir:/posteo/Spam AND NOT maildir:/uni/Junk\\ E-Mail AND NOT list:mathe-info-aktiv.fsmi.uni-karlsruhe.de AND NOT list:fsr-einladung.fsmi.uni-karlsruhe.de AND NOT list:info-aktiv.fsmi.uni-karlsruhe.de"
          :key ?u)
      (:name "Today's messages"
          :query "date:today..now AND NOT maildir:/posteo/Spam AND NOT maildir:/uni/Junk\\ E-Mail"
          :key ?t)
      (:name "Last 7 days"
          :query "date:7d..now AND NOT flag:trashed AND NOT maildir:/posteo/Spam AND NOT maildir:/uni/Junk\\ E-Mail"
          :key ?w)
      (:name "Sent"
          :query "maildir:/posteo/Sent OR maildir:/uni/Sent"
          :key ?s)
      (:name "Marked"
          :query "flag:flagged"
          :key ?m)))

    :local
    (mu4e-compose-mode-hook . ((setq-local ispell-local-dictionary "de_DE"))))
#+end_src

#+begin_src emacs-lisp
  (defun maschm/mu4e-make-message-draft ()
    (interactive)
    (let* ((msg (mu4e-message-at-point 'noerror))
           (docid (mu4e-message-field msg :docid)))
      (mu4e~proc-move docid nil "+D")))
#+end_src

** Gnus view mode

#+begin_src emacs-lisp
  (with-eval-after-load "mm-decode"
    (add-to-list 'mm-discouraged-alternatives "text/html")
    (add-to-list 'mm-discouraged-alternatives "text/richtext"))

  (with-eval-after-load "gnus-art"
    (setq gnus-inhibit-images 't)
    (add-hook 'gnus-article-mode-hook 'visual-line-mode)
    (add-hook 'gnus-article-mode-hook 'visual-fill-column-mode))
  (setq fill-flowed-display-column nil)
  (customize-set-variable 'visual-line-fringe-indicators '(nil right-curly-arrow))

  ;; make html background more readable
  (setq shr-color-visible-luminance-min 80)
  ;; no colors in html mails
  (advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))
#+end_src

** Additional mu4e packages

#+begin_src emacs-lisp
  ;; (use-package org-mu4e
  ;;   :after mu4e)

  (use-package mu4e-maildirs-extension
    :after mu4e
    :config
    (setq mu4e-maildirs-extension-toggle-maildir-key (kbd "TAB"))
    (setq mu4e-maildirs-extension-custom-list
          '("/posteo/Drafts"
            "/posteo/Git"
            "/posteo/Inbox"
            "/posteo/Politik"
            "/posteo/Queue"
            "/posteo/Sent"
            "/posteo/Spam"
            "/posteo/Trash"

            "/uni/Deleted Items"
            "/uni/Drafts"
            "/uni/Inbox"
            "/uni/Junk E-Mail"
            "/uni/Papierkorb"
            "/uni/Queue"
            "/uni/Sent"
            "/uni/Sent"
            "/uni/Outbox"
            "/uni/Trash"))
    (mu4e-maildirs-extension))

  (use-package mu4e-alert
    :after mu4e
    :config
    (mu4e-alert-set-default-style 'libnotify)
    (mu4e-alert-enable-notifications))

  (use-package mu4e-conversation
    :after mu4e
    :config
    (global-mu4e-conversation-mode))

#+end_src

* Visual
** Font

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Hack-12"))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (load-theme 'wombat t)
  ;; (disable-theme 'doom-nord)
  ;; (setq frame-background-mode nil)
  ;; (setq frame-background-mode 'dark)
  ;; (mapc 'frame-set-background-mode (frame-list))

#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package minions
    :demand
    :config (minions-mode 1))

  (use-package moody
    :demand
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+END_SRC

** Fringe

#+BEGIN_SRC emacs-lisp
  (setq indicate-buffer-boundaries 'left)
#+END_SRC

** Scale

this or https://github.com/purcell/default-text-scale/blob/master/default-text-scale.el

#+begin_src emacs-lisp
  (defcustom default-text-scale-amount 10
    "Increment by which to adjust the :height of the default face."
    :type 'integer)

  (defun default-text-scale-increase ()
    "Increase the height of the default face by `default-text-scale-amount'."
    (interactive)
    (set-face-attribute 'default nil :height (+ (face-attribute 'default :height) default-text-scale-amount)))

  (defun default-text-scale-decrease ()
    "Decrease the height of the default face by `default-text-scale-amount'."
    (interactive)
    (set-face-attribute 'default nil :height (- (face-attribute 'default :height) default-text-scale-amount)))

  (defvar default-text-scale-pre nil)
  (general-after-gui
    (setq default-text-scale-pre (face-attribute 'default :height)))

  (defun default-text-scale-reset ()
    "Reset the height of the default face."
    (interactive)
    (set-face-attribute 'default nil :height default-text-scale-pre))
#+end_src

*** Hydra

#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom ()
    "
^Frame zooming^       ^Buffer scaling^
_+_: zoom in        _i_: scale in
_-_: zoom out       _d_: scale out
_=_: zoom reset     _r_: scale reset
"
    ("+" default-text-scale-increase nil)
    ("-" default-text-scale-decrease nil)
    ("=" default-text-scale-reset nil)
    ("i" text-scale-increase nil)
    ("d" text-scale-decrease nil)
    ("r" (text-scale-increase 0) nil))

  (my-menu-def "T z" '(hydra-zoom/body :which-key "Zooming/Scaling"))
#+END_SRC

** Scrolling
from https://github.com/DiegoVicen/my-emacs#Fix-scroll

#+begin_src emacs-lisp
  (setq scroll-step 1
        scroll-conservatively 10000
        mouse-wheel-scroll-amount '(1 ((shift) . 5))
        mouse-wheel-progressive-speed nil
        mouse-wheel-follow-mouse t
        fast-but-imprecise-scrolling t
        jit-lock-defer-time 0.2)

  (general-def
    :keymaps 'global
    "<left-margin><mouse-4>" 'mwheel-scroll
    "<left-margin><mouse-5>" 'mwheel-scroll
    "<right-margin><mouse-4>" 'mwheel-scroll
    "<right-margin><mouse-5>" 'mwheel-scroll
    "<left-fringe><mouse-4>" 'mwheel-scroll
    "<left-fringe><mouse-5>" 'mwheel-scroll
    "<right-fringe><mouse-4>" 'mwheel-scroll
    "<right-fringe><mouse-5>" 'mwheel-scroll)
#+end_src

** Dashboard

https://github.com/emacs-dashboard/emacs-dashboard

#+begin_src emacs-lisp
  (use-package dashboard
    :demand
    :general
    (general-def
      :keymaps 'dashboard-mode-map
      "SPC" nil
      "DEL" nil
      "m" '(lambda () (interactive)
             (dashboard-jump-to-bookmarks)
             (call-interactively 'consult-bookmark))
      "r" '(lambda () (interactive)
             (dashboard-jump-to-recent-files)
             (call-interactively 'consult-recent-file))
      "p" '(lambda () (interactive)
             (dashboard-jump-to-projects)
             (call-interactively 'projectile-switch-project))
      "s" '(lambda () (interactive) (switch-to-buffer "*scratch*"))
      "M" 'mu4e)
    :config
    (evil-make-overriding-map dashboard-mode-map 'motion)
    (evil-set-initial-state 'dashboard-mode 'motion)

    (setq dashboard-items '((recents . 5)
                            (projects . 3)
                            (bookmarks . 5)
                            (agenda . 5)))

    (dashboard-setup-startup-hook)
    (add-hook 'dashboard-after-initialize-hook
              (lambda ()
                (if init-file-had-error
                    (setq dashboard-init-info (concat dashboard-init-info
                                                      "\n !!init file had error!!")))))
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+end_src

** Long lines
*** Bidirectional Text

#+begin_src emacs-lisp
  (setq-default bidi-paragraph-direction 'left-to-right)
  (if (version<= "27.1" emacs-version)
    (setq bidi-inhibit-bpa t))
#+end_src

*** so-long-mode

#+begin_src emacs-lisp
  (if (version<= "27.1" emacs-version)
    (global-so-long-mode 1))
#+end_src

** Other

Turn off mouse interface early in startup to avoid momentary display.

#+BEGIN_SRC emacs-lisp
  (tooltip-mode -1)
#+END_SRC

Highlight trailing whitespace

#+BEGIN_SRC emacs-lisp
  (setq show-trailing-whitespace t)
#+END_SRC

Highlight delimiters such as parentheses, brackets or braces according to their depth

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer 15
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

Display '~' on empty lines like in vi (only in programming modes)

#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :defer 15
    :hook (prog-mode . vi-tilde-fringe-mode))
#+END_SRC

* Completion

https://company-mode.github.io/

https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-in-Buffers.html

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer 15
    :diminish yas-minor-mode
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize))

  (use-package auto-yasnippet
    :after yasnippet
    :config (setq aya-case-fold t))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :defer 30
    :hook (prog-mode . company-mode)
    :config
    (setq company-dabbrev-other-buffers t
          company-dabbrev-code-other-buffers t))

  (use-package company-prescient
    :hook (company-mode . company-prescient-mode))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package pos-tip
    :defer 30)

  (use-package company-quickhelp
    :after (company pos-tip)
    :config (company-quickhelp-mode))
#+END_SRC

** Tags
   :PROPERTIES:
   :header-args:emacs-lisp: :tangle no
   :END:


#+begin_src emacs-lisp
  (use-package counsel-etags
    :disabled
    :after (counsel)
    :general
    (my-menu-def
      "t" '(counsel-etags-find-tag-at-point :which-key "etags"))
    :config
    ;; counsel-etags-ignore-directories does NOT support wildcast
    (add-to-list 'counsel-etags-ignore-directories "build_clang")
    (add-to-list 'counsel-etags-ignore-directories "build_clang")
    ;; counsel-etags-ignore-filenames supports wildcast
    (add-to-list 'counsel-etags-ignore-filenames "TAGS")
    (add-to-list 'counsel-etags-ignore-filenames "*.json"))
#+end_src

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 30
    :general
    (my-menu-def
      "e" '(:ignore t :which-key "Errors")
      "e e" 'flycheck-buffer
      "e b" 'flycheck-buffer
      "e c" 'flycheck-compile
      "e n" 'flycheck-next-error
      "e p" 'flycheck-prev-error))
#+END_SRC

** TODO LSP

#+BEGIN_SRC emacs-lisp
  (setq read-process-output-max (* 1024 1024))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook ((rust-mode . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :custom
    (lsp-diagnostics-provider :capf)
    (lsp-headerline-breadcrumb-enable t)
    (lsp-headerline-breadcrumb-segments '(project file symbols))
    (lsp-lens-enable nil)
    (lsp-disabled-clients '((python-mode . pyls)))
    :config
    (setq lsp-idle-delay 0.500)
    (setq lsp-log-io nil))

  ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package consult-lsp
    :after (lsp-mode consult)
    :config
    (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))

  (use-package lsp-ui
    :disabled
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-show-with-cursor nil)
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-position 'bottom))
#+END_SRC

** xref

#+begin_src emacs-lisp
  (use-package xref
    :general
    (general-def
      :keymaps 'global
      "M-m" 'xref-find-definitions)
    :config
    nil
    )
#+end_src

** TODO DAP
   https://emacs-lsp.github.io/dap-mode/page/features/

#+begin_src emacs-lisp
  (use-package dap-mode
    :config
    (add-hook 'dap-stopped-hook
              (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src

** Spelling
*** ispell

#+BEGIN_SRC emacs-lisp
  (setq ispell-dictionary "en")

  (cond
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")

    ;; Please note that `ispell-local-dictionary` itself will be passed to hunspell cli with "-d"
    ;; it's also used as the key to lookup ispell-local-dictionary-alist
    ;; if we use different dictionary
    (setq ispell-dictionary "de_DE,en_US")
    ;; (setq-default ispell-local-dictionary "en_US")
    ;; (setq ispell-local-dictionary-alist
    ;;   '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)))
    ;; ispell-set-spellchecker-params has to be called
    ;; before ispell-hunspell-add-multi-dic will work
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "de_DE,en_US")
    (setq ispell-personal-dictionary "~/.hunspell_personal")
    (unless (file-exists-p ispell-personal-dictionary)
      (write-region "" nil ispell-personal-dictionary nil 0)))
   ((executable-find "aspell")
    ;; you may also need `ispell-extra-args'
    (setq ispell-program-name "aspell"))
   (t
    (message "no ispell program")
    (setq ispell-program-name nil)))
#+End_SRC

*** flyspell

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook (text-mode . flyspell-mode)
    :config
    ;; do flyspell-buffer after changing the dictionary
    (defun flyspell-buffer-after-change-dict (&rest args)
      (if (< (count-words (point-min) (point-max)) 1000) (flyspell-buffer)))
    (advice-add 'ispell-change-dictionary :after #'flyspell-buffer-after-change-dict)

    ;; ommit error messages on spell checking for performance sake
    (setq flyspell-issue-message-flag nil))

  (use-package flyspell-correct
    :after flyspell
    :general
    (general-nmap
      "z =" 'flyspell-correct-wrapper)
    )
#+End_SRC

** Thesaurus

#+begin_src emacs-lisp
  (use-package synosaurus
    :custom
    (synosaurus-backend 'synosaurus-backend-openthesaurus)
    (synosaurus-choose-method 'default))
#+end_src

* Semantic
** TODO srefactor

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package srefactor
    :defer
    ;;:general
  )
#+END_SRC

** tree-sitter

#+begin_src emacs-lisp
  (use-package tree-sitter)

  (use-package tree-sitter-langs
    :after (tree-sitter)
    :custom
    (tree-sitter-load-path (list (expand-file-name
                                  "straight/build/tree-sitter-langs/bin"
                                  user-emacs-directory))))
#+end_src

* Modes
** text-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'visual-line-mode)

  (setq-default fill-column 78)

  (my-leader-def
    :keymaps 'text-mode-map
    :states 'normal
    "f" '(fill-paragraph :which-key "fill"))

  (my-leader-def
    :keymaps 'text-mode-map
    :states 'visual
    "f" '(fill-region :which-key "fill"))

  (defun my-text-mode-setup () ())
  (add-hook 'text-mode-hook 'my-text-mode-setup)
#+END_SRC

*** visual-fill-column
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :config
    ;; (setq-default split-window-preferred-function 'visual-fill-column-split-window-sensibly)
    ;; (setq visual-fill-column-fringes-outside-margins nil)
  )
#+end_src

*** TODO auto fill on paste
*** TODO fill commands in local menu
** special-mode
#+begin_src emacs-lisp
  (general-def
    :keymaps 'special-mode-map
    "q" nil
    "SPC" nil
    "S-SPC" nil
    "DEL" nil)
#+end_src

** dired
https://github.com/emacs-evil/evil-collection/blob/master/modes/dired/evil-collection-dired.el

#+BEGIN_SRC emacs-lisp
  (my-menu-def
    "D" '(dired-jump :which-key "dired"))

  (general-def
   :keymaps 'global
   "C-c d" 'dired-jump
   "C-c D" 'dired)


  (general-def
   :keymaps 'dired-mode-map
   "SPC" nil
   "I" 'wdired-change-to-wdired-mode
   "j" 'dired-next-line
   "k" 'dired-previous-line
   "h" 'dired-up-directory
   "l" 'dired-find-file
   "<normal-state> j" nil
   "<normal-state> k" nil
   "<normal-state> h" nil
   "<normal-state> l" nil
   "<normal-state> r" nil
   "y" 'dired-copy-filename-as-kill
   "w" 'dired-show-file-type
   "g" nil
   "g r" 'revert-buffer
   "g j" 'dired-next-dirline
   "g k" 'dired-prev-dirline)

  (setq dired-listing-switches "-v --group-directories-first -alh")
  (setq dired-dwim-target t)
#+END_SRC

*** wdired

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'wdired-mode-map
   [remap evil-write] 'wdired-finish-edit)

  (general-define-key
   :keymaps 'wdired-mode-map
   :mode 'normal
   "ESC" 'wdired-exit
   "<escape>" 'wdired-exit)

  ;; (evil-make-overriding-map wdired-mode-map 'normal)
#+END_SRC

*** dired hacks
    by [[https://github.com/Fuco1/dired-hacks][Fuco1 @ github]]

#+begin_src emacs-lisp
  (use-package dired-collapse
    :hook (dired-mode . dired-collapse-mode)
    :config
    (my-leader-def
      :keymaps 'dired-mode-map
      :states nil
      "c" 'dired-collapse-mode))

  (use-package dired-narrow
    :general
    (general-def
      :keymaps 'dired-mode-map
      "/" 'dired-narrow))
#+end_src

** info

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'Info-mode-map
   "SPC" nil
   "<tab>" 'Info-next-reference-or-link
   "S-<tab>" 'Info-prev-reference-or-link
   "C-o" 'Info-history-back
   "C-i" 'Info-history-forward

   "h" nil
   "l" nil
   "M-h" 'Info-help
   "w" nil
   "b" nil
   "e" nil

   "u" 'Info-up
   "H" 'Info-up
   "g" nil
   "gt" 'Info-goto-node
   "gj" 'Info-next
   "gk" 'Info-prev
   "gg" 'evil-goto-first-line

   "q" 'Info-exit)

  (evil-make-overriding-map Info-mode-map 'motion)

  (use-package info-colors
    :hook ((Info-selection . info-colors-fontify-node)))
#+END_SRC

** help

#+BEGIN_SRC emacs-lisp
  (general-define-key
   :keymaps 'help-mode-map
   "SPC" nil

   "C-o" 'help-go-back
   "C-i" 'help-go-forward
   "<" 'help-go-back
   ">" 'help-go-forward
   "r" 'help-follow

   "q" 'quit-window)
#+END_SRC

** helpful

#+BEGIN_SRC emacs-lisp

  (defalias 'describe-variable 'helpful-variable)
  (defalias 'describe-function 'helpful-function)
  (defalias 'describe-symbol 'helpful-symbol)

  (use-package helpful
    :defer 10
    :general
    (my-menu-def
      "h" '(helpful-at-point :which-key "help")
      "H" '(:ignore t :which-key "Help")
      "H h" '(helpful-symbol :which-key "symbol")
      "H v" '(helpful-variable :which-key "variable")
      "H f" '(helpful-function :which-key "function")
      "H c" '(helpful-callable :which-key "callable")
      "H k" '(helpful-key :which-key "key")
      "H X" 'helpful-kill-buffers
      "H i" 'info
      "H I" 'info-display-manual
      "H m" '(woman :which-key "man-page")
      "H M" '(consult-man :which-key "search man-page")
      ;; "H m" '(describe-mode :which-key "mode")
      "H a" 'consult-apropos
      "H F" '(describe-face :which-key "face")
      "H C" '(describe-char :which-key "char")
      "H s" 'set-variable
      "H d" '(:ignore t :which-key "Debug")
      "H d e" 'debug-on-entry
      "H d E" 'cancel-debug-on-entry)
      ;; "H K" which-key-show-keymap
      ;; "H T" which-key-show-top-level

      ;; "H U" 'counsel-unicode-char

    :config
    (general-def
      :keymaps 'helpful-mode-map
      "SPC" nil
      "n" nil
      "p" nil
      "g" nil
      "g r" 'helpful-update
      "q" 'quit-window)
    (evil-make-overriding-map helpful-mode-map 'motion))

#+END_SRC

*** TODO think at point in org-mode src environment

** TODO view
   [[info:emacs#View%20Mode][info:emacs#View Mode]]
   SPC and S-SPC are bound to scrolling.
   Intentionally disable anyway?
   Which buffer are in view mode?

** messages-buffer
   enable "q" to burry-window in messages-buffer-mode and more generally
   special mode

#+begin_src emacs-lisp
  (evil-set-initial-state 'special-mode 'motion)
  (evil-set-initial-state 'messages-buffer-mode 'motion)
  (with-current-buffer "*Messages*"
    (evil-motion-state))
#+end_src

** comint

#+begin_src emacs-lisp
  (evil-define-command maschm/comint-evil-scroll-down-or-maybe-eof (arg)
    "Delete ARG characters forward or send an EOF to subprocess.
  Sends an EOF only if point is at the end of the buffer and there is no input."
    :repeat nil
    :keep-visual t
    (interactive "<c>")
    (let ((proc (get-buffer-process (current-buffer))))
      (if (and (eobp) proc (= (point) (marker-position (process-mark proc))))
          (comint-send-eof)
        (evil-scroll-down arg))))

  (with-eval-after-load "comint"
    (general-def
      :keymaps 'comint-mode-map
      "C-d" 'maschm/comint-evil-scroll-down-or-maybe-eof))
#+end_src

** calc

#+begin_src emacs-lisp
  (my-menu-def
    "c" '(quick-calc :which-key "calc")
    "C" '(calc-dispatch :which-key "calc-dispatch"))
#+end_src

** eshell

#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :defer 30
    :commands (eshell eshell-command)
    :config
    ;; (setq pcomplete-ignore-case t)
    (setq eshell-cmpl-ignore-case t)
    ;; (setq pcomplete-autolist t)
    (setq eshell-cmpl-autolist t)
    (setq pcomplete-cycle-cutoff-length 1)
    (setq eshell-cmpl-cycle-cutoff-length 1)
    (require 'eshell-prompt-extras)
    (require 'eshell-z)
    :local
    (general-define-key
     :keymaps 'eshell-mode-map
     "C-r" 'counsel-esh-history)
    (general-define-key
     :keymaps 'eshell-mode-map
     :states 'motion
     "g j" 'eshell-next-prompt
     "g k" 'eshell-previous-prompt
     "0" 'eshell-bol)
    (evil-make-overriding-map eshell-mode-map 'normal))
    ;;  [remap eshell-pcomplete] 'completion-at-point
    ;;  "<tab>" 'completion-at-point)
    ;;  "TAB" 'completion-at-point)


  (use-package eshell-z
    :after eshell)

  (use-package eshell-prompt-extras
    :after eshell
    :config
    (epe-theme-lambda) ;;to set eshell-prompt-regex
    (setq eshell-prompt-function 'epe-theme-lambda))

  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :general
    (general-def
      :keymaps 'esh-autosuggest-active-map
      "C-e" 'company-complete-selection
      "M-e" 'esh-autosuggest-complete-word))

  (use-package eshell-syntax-highlighting
    :hook (eshell-mode . eshell-syntax-highlighting-mode))
#+END_SRC

** shell

#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

** tramp

recognize the OTP prompt of the uni cluster

#+begin_src emacs-lisp
  (setq tramp-password-prompt-regexp
        (format "^.*\\(%s\\).*:\^@? *" (regexp-opt
                                        (cons "OTP"
                                              password-word-equivalents))))
#+end_src

** irc

#+BEGIN_SRC emacs-lisp
  (use-package erc
    :commands (erc erc-tls)
    )

  (setq my-fav-irc '("irc.freenode.net"
                     "irc.oftc.net"
                     "irc.mozilla.org"
                     "irc.gnome.org"))
#+END_SRC

** compilation
When compiling follow the buffer

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
  ;; Don't stop on info or warnings.
  (setq compilation-skip-threshold 2)
  ;; Stop on the first error.
  (setq compilation-auto-jump-to-first-error t)

  (add-hook 'compilation-mode-hook 'follow-mode)

  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region compilation-filter-start (point))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  (general-def
    :keymaps 'compilation-mode-map
    "g" nil
    "gr" 'recompile)
#+END_SRC

** image

#+begin_src emacs-lisp
  (with-eval-after-load 'evil
    (with-eval-after-load 'image-mode
      (general-define-key
       :keymaps 'image-mode-map
       "q" 'kill-current-buffer
       "SPC" nil)
      (evil-make-overriding-map image-mode-map 'normal)))

  ;; (use-package image-mode
  ;;   :after evi   l
  ;;   :init
  ;;   (general-define-key
  ;;    :keymaps 'image-mode-map
  ;;    "SPC" nil
  ;;    "q" nil)
  ;;   :config
  ;;   (evil-make-overriding-map image-mode-map 'motion))
#+end_src

*** TODO fix image-mode bindings
    image mode map is defined with =make-composed-keymap=

** ediff

#+begin_src emacs-lisp
  (use-package ediff
      :defer t
      :after (winner outline)
      :init
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      (setq ediff-split-window-function 'split-window-horizontally)
      (setq ediff-merge-split-window-function 'split-window-horizontally)
      :config
      ;; show org ediffs unfolded
      (add-hook 'ediff-prepare-buffer-hook #'outline-show-all)
      ;; restore window layout when done
      (add-hook 'ediff-quit-hook #'winner-undo))
#+end_src

*** TODO look at linediff
    https://github.com/rgrinberg/evil-quick-diff

** calendar

#+begin_src emacs-lisp
  (use-package calendar
    :custom
    (calendar-week-start-day 1))
#+end_src

** man

woman > man because emacs suffices

#+begin_src emacs-lisp
  (defalias 'man 'woman)
  (with-eval-after-load 'woman
    (customize-set-variable 'woman-fill-frame t))
#+end_src

** drawing
*** dot

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
#+end_src

*** PlantUML

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :config
    (setq plantuml-jar-path (expand-file-name "plantuml.jar" user-emacs-directory))
    (setq plantuml-default-exec-mode 'jar))
#+end_src

** mediawiki

#+begin_src emacs-lisp
  (use-package mediawiki
    :config
    (add-to-list 'mediawiki-site-alist '("Fachschaft" "https://wiki.fsmi.uni-karlsruhe.de/" "username" "password" nil "Main Page")))
#+end_src

* Programming languages
** prog-mode

#+begin_src emacs-lisp
  (defun comment-auto-fill ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (defun my-prog-mode-setup ()
    (electric-pair-local-mode)
    (comment-auto-fill)
    (setq-local ispell-local-dictionary "en_US"))

  (add-hook 'prog-mode-hook 'my-prog-mode-setup)
#+end_src

*** TODO indent

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-always-indent nil)
  (setq-default electric-indent-inhibit t)
  (setq blink-matching-delay 0.4)

  ;; ignored when using evil-mode ?
  (use-package clean-aindent-mode
    :config (setq clean-aindent-is-simple-indent t))
#+END_SRC

*** electric-operator

#+begin_src emacs-lisp
  (use-package electric-operator
    :disabled
    :hook ((prog-mode . electric-operator-mode))
    :config
    (electric-operator-add-rules-for-mode 'sh-mode
      (cons "-" nil))
    )
#+end_src
*** line numbers

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; (setq-default display-line-numbers-width-start t)
  (setq-default display-line-numbers-grow-only t)
  (setq-default display-line-numbers-width 3)

#+END_SRC

*** whitespace

#+begin_src emacs-lisp
    (use-package ws-butler
      :hook
      (prog-mode . ws-butler-mode)
      (org-mode . ws-butler-mode))
#+end_src

*** TODO show-parens
** Lisp
Use common-lips indent function because elisp is not nice with keywords

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'emacs-lisp-mode-hook
  ;;           (lambda () (setq-local lisp-indent-function #'common-lisp-indent-function)))
#+END_SRC

*** TODO Common Lisp
    https://common-lisp.net/project/slime/

*** TODO Closure
    https://cider.mx/

*** elisp debug

[[info:elisp#Backtraces][elisp#Backtraces]]
[[info:elisp#Debugger Commands][elisp#Debugger Commands]]

** C/C++
https://github.com/realgud/realgud
https://github.com/tuhdo/semantic-refactor

#+BEGIN_SRC emacs-lisp
  (setq-default c-basic-offset 8)

  (use-package cc-mode
    :general
    (my-menu-def
      "F o" 'ff-get-other-file
      "F O" '(lambda () (interactive) (ff-get-other-file t)))
    :local
    (c-mode-common-hook . ((setq-local tab-width 8)))
    (java-mode-hook . ((setq-local tab-width 4)
                       (setq-local c-basic-offset 4))))

  (use-package ccls
    :disabled
    :after projectile
    ;; :ensure-system-package ccls
    :custom
    (ccls-args nil)
    (ccls-executable (executable-find "ccls"))
    :init
    (setq projectile-project-root-files-top-down-recurring
      (append '("compile_commands.json" ".ccls")
          projectile-project-root-files-top-down-recurring))
    :config
    (setq lsp-prefer-flymake nil)
    (push ".ccls-cache" projectile-globally-ignored-directories)
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))

  (use-package realgud
    :defer
    :after (cc-mode))

  (use-package glsl-mode
    :defer
    :mode ("\\.glsm\\'" "\\.vert\\'" "\\.frag\\'" "\\.geom\\'")
    )

  (use-package company-c-headers
    :after (cc-mode)
    :config
    (add-to-list 'company-backends 'company-c-headers)
    ;; (setq company-c-headers-path-system "" )
    )

#+END_SRC

*** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode)

  (use-package cmake-font-lock
    :hook (cmake-mode-hook . cmake-font-lock-activate))

  (use-package cmake-project
    :disabled
    :init
    (defun maybe-cmake-project-mo    de ()
           (if (or (file-exists-p "CMakeLists.txt")
                   (file-exists-p
                    (expand-file-name "CMakeLists.txt" (car (project-roots (project-current))))))
               (cmake-project-mode)))

    (add-hook 'c-mode-hook 'maybe-cmake-project-mode)
    (add-hook 'c++-mode-hook 'maybe-cmake-project-mode))
#+end_src

*** format

#+begin_src emacs-lisp
  (use-package clang-format+)
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package python
    :mode
    ("SConstruct" . python-mode)
    ("SConscript" . python-mode)
    :config
    ;; Use IPython when available or fall back to regular Python
    (cond
     ((executable-find "ipython")
      (progn
        (setq python-shell-buffer-name "IPython")
        (setq python-shell-interpreter "ipython")
        (setq python-shell-interpreter-args "-i --simple-prompt")))
     ((executable-find "python3")
      (setq python-shell-interpreter "python3"))
     ((executable-find "python2")
      (setq python-shell-interpreter "python2"))
     (t
      (setq python-shell-interpreter "python"))))

  (use-package lsp-pyright
    :hook (python-mode . (lambda () (require 'lsp-pyright) (lsp-deferred))) ; or lsp
    :config
    ())

  (use-package blacken
    :init
    (setq-default blacken-fast-unsafe t)
    (setq-default blacken-line-length 80))
#+end_src

#+begin_src emacs-lisp
  (use-package jupyter
    :after ob
    :config
    (add-to-list 'org-babel-load-languages '(jupyter . t) t)
    (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
    (setq org-babel-jupyter-resource-directory "/tmp/emacs-jupyter"))
#+end_src

** TODO Haskell
*** Intero
    intero project has reached the end of its life cycle. city_sunrise

    I will not be maintaining it any longer.
    Minimal pull requests will be accepted for a few months.
    After which, I will archive the project.

https://commercialhaskell.github.io/intero/

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :config
    (general-def
      :keymaps 'haskell-mode-map
      "C-c C-c" 'haskell-compile)
    (evil-set-initial-state 'interactive-haskell-mode 'emacs)
    (evil-set-initial-state 'haskell-error-mode 'emacs))

  (use-package intero
    :hook (haskell-mode . intero-mode))
#+END_SRC

*** Dante
https://github.com/jyp/dante

fork of intero

** TODO Pdf/Latex
*** AUCTeX
https://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :straight auctex
    :custom
    (TeX-parse-self t)
    (TeX-auto-save t)
    (TeX-byte-compile t)
    (TeX-clean-confirm nil)
    (TeX-complete-expert-commands t)
    (TeX-debug-bad-boxes t)
    (TeX-debug-warnings t)
    (TeX-electric-escape nil)
    (TeX-electric-math nil)
    (TeX-electric-sub-and-superscript t)
    (LaTeX-electric-left-right-brace t)
    (TeX-master 'dwim)
    ;; (TeX-PDF-mode t)
    ;; (TeX-source-correlate-mode t)
    ;; (TeX-source-correlate-start-server t)
    (LaTeX-default-style "scrartcl")
    (LaTeX-default-options '("version=last" "paper=A4" "parskip=half"))
    (TeX-auto-untabify t)
    :config
    ;; KEYMAPS
    ;; (general-define-key :keymaps 'TeX-error-overview-mode-map
    ;;   "j" 'TeX-error-overview-next-error
    ;;   "k" 'TeX-error-overview-previous-error
    ;;   "h" nil
    ;;   "l" nil
    ;;   "q" 'TeX-error-overview-quit)
    ;; (evil-make-overriding-map TeX-error-overview-mode-map 'normal)
    ;; HOOKS
    (add-hook 'LaTeX-mode-hook #'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook #'flyspell-mode)
    (add-hook 'LaTeX-mode-hook #'reftex-mode)
    (add-hook 'LaTeX-mode-hook #'auto-fill-mode)
    (add-hook 'LaTeX-mode-hook #'visual-line-mode)
    :local
    (LaTeX-mode-hook . ((set-fill-column 80))))


  (use-package bibtex
    :custom
    (bibtex-dialect 'biblatex))
  ;; (load "auctex.el" nil t t)

  (use-package auctex-latexmk
    :after tex
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t))

  (use-package company-auctex
    :after tex
    :config
    (add-hook 'LaTeX-mode-hook 'company-mode)
    (company-auctex-init))
#+END_SRC

*** latex-preview-pane

#+begin_src emacs-lisp
  (use-package latex-preview-pane
    :after tex
    :config
    (latex-preview-pane-enable))

  ;; Embed prewie images
  ;; (use-package preview
  ;;   :custom
  ;;   (preview-auto-cache-preamble t)
  ;;   (preview-preserve-counters t)
  ;;   (preview-preseve-indentation t))
#+END_SRC

*** pdf-tools

#+begin_src emacs-lisp
  (use-package pdf-tools
    ;; manually update
    ;; :pin manual
    :defer 15
    :config
    (general-def
      :keymaps 'pdf-view-mode-map
      "j" 'pdf-view-next-line-or-next-page
      "k" 'pdf-view-previous-line-or-previous-page
      "C-e" 'pdf-view-next-line-or-next-page
      "C-y" 'pdf-view-previous-line-or-previous-page
      "C-d" 'pdf-view-scroll-up-or-next-page
      "C-u" 'pdf-view-scroll-down-or-previous-page
      "h" 'image-forward-hscroll
      "l" 'image-backward-hscroll
      "RET" 'pdf-view-next-page
      "DEL" 'pdf-view-previous-page

      "G" 'pdf-view-last-page
      "g" nil
      "gg" 'pdf-view-first-page
      "gt" 'pdf-view-goto-page
      "gl" 'pdf-view-goto-label
      "gr" 'revert-buffer

      "<C-mouse-4>" '(lambda () (interactive) (pdf-view-enlarge 1.1))
      "<C-mouse-5>" '(lambda () (interactive) (pdf-view-shrink 1.1))
      "<mouse-6>" 'image-backward-hscroll
      "<mouse-7>" 'image-forward-hscroll
      "=" 'pdf-view-scale-reset
      "sw" 'pdf-view-fit-width-to-window
      "sh" 'pdf-view-fit-heigth-to-window
      "sp" 'pdf-view-fit-page-to-window

      "C-s" 'isearch-forward

      "SPC" nil )

    (my-leader-def
      :keymaps 'pdf-view-mode-map
      ;; evil state mode bindings are only active after the first mode change
      :states nil
      "a" 'pdf-annot-list-annotations
      "h" 'pdf-annot-add-highlight-markup-annotation
      "t" 'pdf-annot-add-text-annotation
      "c" 'pdf-annot-mouse-add-text-annotation
      "m" 'pdf-view-themed-minor-mode
      "d" 'pdf-view-dark-minor-mode
      "n" 'pdf-view-midnight-minar-mode
      "p" 'pdf-view-printer-minor-mode)

    (evil-make-overriding-map pdf-view-mode-map 'motion)
    (evil-set-initial-state 'pdf-view-mode 'motion)

    (pdf-tools-install t)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)
    ;; automatically annotate highlights
    (setq pdf-annot-activate-created-annotations t)
    ;; (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
    (add-to-list 'revert-without-query "\.pdf$")
    (setq TeX-view-program-list '(("pdf-tools" TeX-pdf-tools-sync-view))))
#+end_src

** Rust
   https://github.com/brotzeit/rustic
   rustic focuses on integration to many emacs packages and rust-mode wants to
   be light weight.

#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :mode (("\\.rs\\'" . rustic-mode)
           ("\\.ron\\'" . rustic-mode))
    :config
    (push "target" projectile-globally-ignored-directories)

    (evil-set-initial-state 'rustic-popup-mode 'emacs)

    (my-menu-def
      :keymaps 'rustic-mode-map
      "P c" 'rustic-cargo-build
      "P r" 'rustic-cargo-run)

    (my-leader-def
      :keymaps 'rustic-mode-map
      "," 'rustic-popup
      "c" 'rustic-cargo-build
      "r" 'rustic-cargo-run)

    (general-def
      :keymaps 'rustic-compilation-mode-map
      "g" nil
      "g r" 'rustic-recompile)
    (evil-make-overriding-map rustic-compilation-mode-map 'motion)

    :local
    (add-hook 'compilation-mode-hook #'rustic-compilation-mode 0 t))
#+END_SRC

** TODO JS
https://github.com/NicolasPetton/Indium

#+begin_src emacs-lisp
  (use-package web-mode)
#+end_src

** TODO Typescript

#+begin_src emacs-lisp

#+end_src

** Elm

#+begin_src emacs-lisp
  (use-package elm-mode
    :mode ("\\.elm\\'")
    :config
    (add-to-list 'company-backends 'company-elm)
    (push "elm-stuff" projectile-globally-ignored-directories))
#+end_src

** PHP

#+begin_src emacs-lisp
  (use-package php-mode
    :mode ("\\.php\\'"))
#+end_src

** R

#+begin_src emacs-lisp
  (use-package ess)
#+end_src

** Julia

#+begin_src emacs-lisp
  (use-package julia-mode)

  (use-package julia-snail
    :hook (julia-mode . julia-snail-mode))
#+end_src

** Dart

#+begin_src emacs-lisp
  (use-package dart-mode)

  (use-package lsp-dart
    :disabled
    :hook (dart-mode . lsp))
#+end_src

** Erlang

#+begin_src emacs-lisp
  (use-package erlang)
#+end_src

** Sonic Pi

#+begin_src emacs-lisp
  (use-package sonic-pi
    :config
    (setq sonic-pi-path "/usr/lib/sonic-pi/"))
#+end_src

** GDScript

#+begin_src emacs-lisp
  (use-package gdscript-mode
    :straight (gdscript-mode
           :type git :host github :repo "GDQuest/emacs-gdscript-mode"
           :files ("*.el" "data/*.txt"))

    :config
    (setq gdscript-tabs-mode t) ;; If true, use tabs for indents. Default: t
    (setq gdscript-tab-width 4) ;; Controls the width of tab-based indents
    )
#+end_src

** Markup & Config Langs
*** yaml

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yml\\'"))
#+end_src

*** toml

#+begin_src emacs-lisp
  (use-package toml-mode
    :mode ("\\.toml\\'"))
#+end_src

*** markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))
#+end_src

** system & config
*** systemd
*** Docker

#+begin_src emacs-lisp
  (use-package dockerfile-mode)


  (use-package docker-tramp
    :config
    (setq docker-tramp-user "root"))
#+end_src


#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

*** nginx

#+begin_src emacs-lisp
  (use-package nginx-mode
    :init
    (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode)))
#+end_src

*** PKGBUILD

Recognize arch linux pgkbuild files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . shell-script-mode))
#+END_SRC

* Settings
** editorconfig

#+begin_src emacs-lisp
  (use-package editorconfig
    :hook (prog-mode . editorconfig-mode-apply)
    :config
    (editorconfig-mode 1))
#+end_src

** yes-no

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq use-dialog-box nil)
#+end_src

** kill buffer with process

#+begin_src emacs-lisp
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))
#+end_src

** vc symlinks
Always follow symlinks to vc controlled sources.
This happens a lot because my dotfiles are linked by stow.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** sudo-edit

#+begin_src emacs-lisp
  (use-package sudo-edit
    :general
    (my-menu-def
      "F s" 'sudo-edit-find-file))
#+end_src

** atomic-chrome
Edit textareas of the browser in emacs

#+begin_src emacs-lisp
  (use-package atomic-chrome
    :defer 20
    :config
    (atomic-chrome-start-server))
#+end_src

** auth-sources

#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))

  (defun maschm/auth-source-get-secret (user host port)
    (let* ((found (nth 0 (auth-source-search
                          :max 1
                          :user user
                          :host host
                          :port port
                          :require '(:secret))))
           (secret (plist-get found :secret)))
      (if (functionp secret)
          (funcall secret)
        secret)))
#+end_src

* Functions
** current-file
#+BEGIN_SRC emacs-lisp
  (defun rename-current-file ()
    "Renames both current buffer and the file it's visiting."
    (interactive)
    (unless (buffer-file-name)
      (error "Buffer '%s' is not visiting a file!" (buffer-name)))
    (let* ((new-file-name
            (read-file-name "Rename current file to: "
                            (file-name-directory buffer-file-name)))
           (new-dir (f-parent new-file-name)))
      (unless (f-dir? new-dir)
        (make-directory new-dir t)
        (message "Create dir %s." new-dir))
      (rename-file buffer-file-name new-file-name)
      (rename-buffer new-file-name)
      (set-visited-file-name new-file-name)
      (set-buffer-modified-p nil)
      (setq-local default-directory (file-name-directory new-file-name))
      (message "Current file renamed to %s." new-file-name)))

  (defun delete-current-file ()
    "Deletes the current buffer and the file it's visiting."
    (interactive)
    (unless (buffer-file-name)
      (error "Buffer '%s' is not visiting a file!" (buffer-name)))
    (delete-file buffer-file-name)
    (kill-buffer))
#+END_SRC

** macro execute
#+BEGIN_SRC emacs-lisp
  ;; alternative command version
  (defun maschm/q ()
    "Apply macro in q register on selected lines."
    (interactive)
    (if (evil-visual-state-p)
        (evil-ex-normal (region-beginning) (region-end) "@q")
      (evil-execute-macro 1 (evil-get-register ?q))))

  (general-define-key
   :states '(normal)
   "Q" 'maschm/q)
#+END_SRC

** dir-local reload
#+BEGIN_SRC emacs-lisp
  (defun reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))

  (defun reload-dir-locals-for-current-buffer ()
    "reload dir locals for the current buffer"
    (interactive)
    (let ((enable-local-variables :all))
      (hack-dir-local-variables-non-file-buffer)))
#+END_SRC

** TODO calendar

#+begin_src emacs-lisp
  (defun maschm/show-calendar ()
    (interactive)
    (calendar))
#+end_src

** format-flowed

#+begin_src emacs-lisp
  (defun fill-flowed (&optional buffer delete-space)
    "Apply RFC2646 decoding to BUFFER.
  If BUFFER is nil, default to the current buffer.

  If DELETE-SPACE, delete RFC2646 spaces padding at the end of
  lines."
    (with-current-buffer (or buffer (current-buffer))
      (let ((fill-column  (eval fill-flowed-display-column)))
        (goto-char (point-min))
        (while (not (eobp))
          (cond
           ((and (looking-at "^>+")
                 (eq (char-before (line-end-position)) ?\s))
            (let ((prefix (match-string 0)))
              ;; Insert a space character after the quote signs for more
              ;; pleasant reading of quoted lines.
              (goto-char (match-end 0))
              (unless (looking-at " ")
                (insert " "))
              (end-of-line)
              (when (and (not (eobp))
                         (save-excursion
                           (forward-line 1)
                           (looking-at (format "\\(%s ?\\)[^>]" prefix))))
                ;; Delete the newline and the quote at the start of the
                ;; next line.
                (delete-region (point) (match-end 1))
                (ignore-errors
                  (let ((fill-prefix (concat prefix " "))
                        adaptive-fill-mode)
                    (fill-region (line-beginning-position)
                                 (line-end-position)
                                 'left 'nosqueeze))))))
           (t
            ;; Delete the newline.
            (when (eq (following-char) ?\s)
              (delete-char 1))
            ;; Hack: Don't do the flowing on the signature line.
            (when (and (not (looking-at "-- $"))
                       (eq (char-before (line-end-position)) ?\s))
              (end-of-line)
              (when delete-space
                (delete-char -1))
              (delete-char 1)
              (ignore-errors
                (let ((fill-prefix ""))
                  (fill-region (line-beginning-position)
                               (line-end-position)
                               'left 'nosqueeze))))))
          (unless (eq (char-before (line-end-position)) ?\s)
            (forward-line 1))
          (beginning-of-line)))))
#+end_src
